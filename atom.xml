<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Cyril&#39;s Blog</title>
  
  <subtitle>关于明天的事，我们后天就知道了</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2022-10-08T05:49:56.930Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Cyril Xu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CentOS编译Nginx</title>
    <link href="http://yoursite.com/posts/be8eea7e/"/>
    <id>http://yoursite.com/posts/be8eea7e/</id>
    <published>2022-10-05T13:55:19.000Z</published>
    <updated>2022-10-08T05:49:56.930Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0-为什么要自己编译Nginx"><a href="#0-为什么要自己编译Nginx" class="headerlink" title="0 为什么要自己编译Nginx"></a>0 为什么要自己编译Nginx</h1><p>在CentOS下，可以自己配置Nginx的yum源，这样安装简单，以后升级也更方便。唯一美中不足的是不能修改返回参数Server: nginx。因此，为了安全起见，需要自己修改源代码后编译Nginx。</p><a id="more"></a><h1 id="1-下载源代码"><a href="#1-下载源代码" class="headerlink" title="1 下载源代码"></a>1 下载源代码</h1><p>在官网<a href="https://nginx.org/en/download.html下载最新稳定版本" target="_blank" rel="noopener">https://nginx.org/en/download.html下载最新稳定版本</a></p><p>解压后，修改源代码，防止信息泄露</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SERVER_MASK=StringYouWantToShow</span><br><span class="line"></span><br><span class="line">sed -i <span class="string">"s|\"nginx/\"|\"<span class="variable">$&#123;SERVER_MASK&#125;</span>/\"|g"</span> src/core/nginx.h</span><br><span class="line">sed -i -e <span class="string">"s|Server: nginx|Server: <span class="variable">$&#123;SERVER_MASK&#125;</span>|g"</span> src/http/ngx_http_header_filter_module.c</span><br><span class="line">sed -i <span class="string">"s|&lt;center&gt;nginx&lt;/center&gt;|&lt;center&gt;<span class="variable">$&#123;SERVER_MASK&#125;</span>&lt;/center&gt;|g"</span> src/http/ngx_http_special_response.c</span><br></pre></td></tr></table></figure><h1 id="2-编译"><a href="#2-编译" class="headerlink" title="2 编译"></a>2 编译</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum -y install make zlib zlib-devel gcc gcc-c++ libtool openssl openssl-devel</span><br><span class="line">./configure --prefix=/usr/<span class="built_in">local</span>/nginx --with-http_ssl_module --with-pcre --with-stream --with-stream_ssl_module --with-stream_ssl_preread_module --with-pcre-jit</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><h1 id="3-添加系统服务"><a href="#3-添加系统服务" class="headerlink" title="3 添加系统服务"></a>3 添加系统服务</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># chkconfig: - 85 15</span></span><br><span class="line"><span class="comment"># description: Nginx is a World Wide Web server.</span></span><br><span class="line"><span class="comment"># processname: nginx</span></span><br><span class="line"></span><br><span class="line">nginx=/usr/<span class="built_in">local</span>/nginx/sbin/nginx</span><br><span class="line">conf=/usr/<span class="built_in">local</span>/nginx/conf/nginx.conf</span><br><span class="line"><span class="keyword">case</span> <span class="variable">$1</span> <span class="keyword">in</span></span><br><span class="line">start)</span><br><span class="line"><span class="built_in">echo</span> -n <span class="string">"Starting Nginx"</span></span><br><span class="line"><span class="variable">$nginx</span> -c <span class="variable">$conf</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">" done"</span></span><br><span class="line">;;</span><br><span class="line">stop)</span><br><span class="line"><span class="built_in">echo</span> -n <span class="string">"Stopping Nginx"</span></span><br><span class="line">killall -9 nginx</span><br><span class="line"><span class="built_in">echo</span> <span class="string">" done"</span></span><br><span class="line">;;</span><br><span class="line"><span class="built_in">test</span>)</span><br><span class="line"><span class="variable">$nginx</span> -t -c <span class="variable">$conf</span></span><br><span class="line">;;</span><br><span class="line">reload)</span><br><span class="line"><span class="built_in">echo</span> -n <span class="string">"Reloading Nginx"</span></span><br><span class="line">ps auxww | grep nginx | grep master | awk <span class="string">'&#123;print $2&#125;'</span> | xargs <span class="built_in">kill</span> -HUP</span><br><span class="line"><span class="built_in">echo</span> <span class="string">" done"</span></span><br><span class="line">;;</span><br><span class="line">restart)</span><br><span class="line"><span class="variable">$0</span> stop</span><br><span class="line"><span class="variable">$0</span> start</span><br><span class="line">;;</span><br><span class="line">show)</span><br><span class="line">ps -aux|grep nginx</span><br><span class="line">;;</span><br><span class="line">*)</span><br><span class="line"><span class="built_in">echo</span> -n <span class="string">"Usage: <span class="variable">$0</span> &#123;start|restart|reload|stop|test|show&#125;"</span></span><br><span class="line">;;</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure><p>设置执行权限：<code>chmod +x /etc/init.d/nginx</code></p><p>注册成服务：<code>chkconfig --add nginx</code></p><p>设置开机启动：<code>chkconfig nginx on</code></p><h1 id="附-隐藏版本号"><a href="#附-隐藏版本号" class="headerlink" title="附: 隐藏版本号"></a>附: 隐藏版本号</h1><p>在<code>nginx.conf</code>里添加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    ...</span><br><span class="line">    server_tokens off;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;0-为什么要自己编译Nginx&quot;&gt;&lt;a href=&quot;#0-为什么要自己编译Nginx&quot; class=&quot;headerlink&quot; title=&quot;0 为什么要自己编译Nginx&quot;&gt;&lt;/a&gt;0 为什么要自己编译Nginx&lt;/h1&gt;&lt;p&gt;在CentOS下，可以自己配置Nginx的yum源，这样安装简单，以后升级也更方便。唯一美中不足的是不能修改返回参数Server: nginx。因此，为了安全起见，需要自己修改源代码后编译Nginx。&lt;/p&gt;
    
    </summary>
    
      <category term="安全" scheme="http://yoursite.com/categories/%E5%AE%89%E5%85%A8/"/>
    
      <category term="nginx" scheme="http://yoursite.com/categories/%E5%AE%89%E5%85%A8/nginx/"/>
    
      <category term="CentOS" scheme="http://yoursite.com/categories/%E5%AE%89%E5%85%A8/nginx/CentOS/"/>
    
    
      <category term="安全" scheme="http://yoursite.com/tags/%E5%AE%89%E5%85%A8/"/>
    
      <category term="nginx" scheme="http://yoursite.com/tags/nginx/"/>
    
      <category term="CentOS" scheme="http://yoursite.com/tags/CentOS/"/>
    
  </entry>
  
  <entry>
    <title>安装Jenkins实现自动化部署</title>
    <link href="http://yoursite.com/posts/fbe463ed/"/>
    <id>http://yoursite.com/posts/fbe463ed/</id>
    <published>2022-03-03T05:36:45.000Z</published>
    <updated>2022-10-08T05:50:23.829Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0-前言"><a href="#0-前言" class="headerlink" title="0. 前言"></a>0. 前言</h1><p>和同事做网站，我负责后端代码开发。每次写完代码，都要打包上传到服务器，手动执行脚本，太累。我一直跟我的小兄弟们说，如果一件事情要做3遍以上，你就需要考虑自动化。今天弄个Jenkins做自动化部署，从繁重的手动操作中解放出来。</p><a id="more"></a><h1 id="1-配置yum源并安装Jenkins"><a href="#1-配置yum源并安装Jenkins" class="headerlink" title="1. 配置yum源并安装Jenkins"></a>1. 配置yum源并安装Jenkins</h1><p>CentOS官方yum源未提供Jenkins ，需要配置yum.repo。</p><h2 id="0-下载yum-repo文件"><a href="#0-下载yum-repo文件" class="headerlink" title="0. 下载yum.repo文件"></a>0. 下载yum.repo文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -O /etc/yum.repos.d/jenkins.repo http://pkg.jenkins-ci.org/redhat/jenkins.repo</span><br></pre></td></tr></table></figure><p>把<code>jenkins.repo</code>文件下载到<code>/etc/yum.repos.d/</code>目录下看到</p><h2 id="1-导入公钥"><a href="#1-导入公钥" class="headerlink" title="1. 导入公钥"></a>1. 导入公钥</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm --import http://pkg.jenkins.io/redhat-stable/jenkins.io.key</span><br></pre></td></tr></table></figure><h2 id="2-安装"><a href="#2-安装" class="headerlink" title="2. 安装"></a>2. 安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install jenkins</span><br></pre></td></tr></table></figure><h2 id="3-配置"><a href="#3-配置" class="headerlink" title="3. 配置"></a>3. 配置</h2><p>Jenkins工作目录为<code>/var/lib/jenkins/</code>，配置文件位于<code>/etc/sysconfig/jenkins</code></p><p>Jenkins默认端口为8080，8080我已经使用了，所以改成其他端口，并在Nginx反向代理到该端口。</p><p>Jenkins会使用<code>/usr/bin/java</code>作为默认Java安装位置，修改java所在位置为正确位置。</p><h2 id="4-启动"><a href="#4-启动" class="headerlink" title="4. 启动"></a>4. 启动</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service jenkins start</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：这里启动可能失败。我遇到的问题是配置文件里的修改没起作用。我把应用的8080改成其他端口了，并且建了一个软连接：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /xxx/xxx/java /usr/bin/java</span><br></pre></td></tr></table></figure><p><strong>update</strong>：我第二次安装的时候仍然启动失败，报找不到java的错误。google了一圈，发现Jenkins用systemctl启动时读取的是<code>/usr/lib/systemd/system/jenkins.service</code>。删掉这个文件，在<code>/etc/init.d/jenkins</code>配置好java路径，启动成功</p><h1 id="2-配置Jenkins工具、插件"><a href="#2-配置Jenkins工具、插件" class="headerlink" title="2. 配置Jenkins工具、插件"></a>2. 配置Jenkins工具、插件</h1><p>在浏览器打开Jenkins，需要输入<code>/var/lib/jenkins/secrets/initialAdminPassword</code>文件中的安全码，设置好用户名及插件</p><p>在体统管理-&gt;全局工具配置中，根据实际目录配置java、maven、git等信息。</p><p>因为要在构建成功后启动spring boot程序，还要安装<code>build post task</code>插件。</p><h1 id="3-开始使用"><a href="#3-开始使用" class="headerlink" title="3. 开始使用"></a>3. 开始使用</h1><p>点击新建任务，输入任务名。因为只是为了实现自己简单的部署，选择第一个选项：构建软件项目。</p><p>逐项开始设置：</p><ol><li><p>General</p><p>我只选择了丢弃旧的构建，保留最多5个构建记录</p></li><li><p>源码管理</p><p>选择Git，填入repository地址和响应的credential，选择对应的分支</p></li><li><p>构建触发器</p><p>直接选轮询 <code>* * * * *</code>每分钟检测一次代码更新</p></li><li><p>构建环境</p></li><li><p>构建</p><p>调用之前设置的maven配置，目标填clean package</p></li><li><p>构建后操作</p><p>选择post build task，输入脚本执行cp和sh start.sh命令，勾选只有之前所有步骤全部成功时才执行</p></li></ol><h1 id="4-坑"><a href="#4-坑" class="headerlink" title="4. 坑"></a>4. 坑</h1><ol><li><p>权限问题。</p><p>执行构建不成功，查看log发现下载依赖时出错。把maven本地仓库所有者改成了jenkins解决了</p></li><li><p>有些人遇到启动程序后被kill掉的问题，在执行脚本时修改BUILD_ID解决问题。我没遇到</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;0-前言&quot;&gt;&lt;a href=&quot;#0-前言&quot; class=&quot;headerlink&quot; title=&quot;0. 前言&quot;&gt;&lt;/a&gt;0. 前言&lt;/h1&gt;&lt;p&gt;和同事做网站，我负责后端代码开发。每次写完代码，都要打包上传到服务器，手动执行脚本，太累。我一直跟我的小兄弟们说，如果一件事情要做3遍以上，你就需要考虑自动化。今天弄个Jenkins做自动化部署，从繁重的手动操作中解放出来。&lt;/p&gt;
    
    </summary>
    
      <category term="Jenkins" scheme="http://yoursite.com/categories/Jenkins/"/>
    
      <category term="CentOS" scheme="http://yoursite.com/categories/Jenkins/CentOS/"/>
    
    
      <category term="CentOS" scheme="http://yoursite.com/tags/CentOS/"/>
    
      <category term="Jenkins" scheme="http://yoursite.com/tags/Jenkins/"/>
    
  </entry>
  
  <entry>
    <title>CentOS安装Redis</title>
    <link href="http://yoursite.com/posts/3675cb27/"/>
    <id>http://yoursite.com/posts/3675cb27/</id>
    <published>2022-02-20T05:45:10.000Z</published>
    <updated>2022-10-08T08:49:03.952Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0-安装Redis的两种方法"><a href="#0-安装Redis的两种方法" class="headerlink" title="0 安装Redis的两种方法"></a>0 安装Redis的两种方法</h1><ul><li>使用epel源安装Redis，目前版本是3.2</li><li>自己编译。Redis 6.0 版本需要gcc 5.3以上，需要升级gcc</li></ul><h1 id="1-使用yum安装"><a href="#1-使用yum安装" class="headerlink" title="1 使用yum安装"></a>1 使用yum安装</h1><h2 id="0-安装fedora的epel仓库"><a href="#0-安装fedora的epel仓库" class="headerlink" title="0 安装fedora的epel仓库"></a>0 安装fedora的epel仓库</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install epel-release</span><br></pre></td></tr></table></figure><h2 id="1-安装redis"><a href="#1-安装redis" class="headerlink" title="1 安装redis"></a>1 安装redis</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install redis</span><br></pre></td></tr></table></figure><h2 id="2-配置redis"><a href="#2-配置redis" class="headerlink" title="2 配置redis"></a>2 配置redis</h2><p>修改<code>/etc/redis.conf</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bind 127.0.0.1</span><br><span class="line">daemonize yes</span><br><span class="line">maxmemory 500mb</span><br><span class="line">maxmemory-policy volatile-lru</span><br></pre></td></tr></table></figure><h2 id="3-开机启动"><a href="#3-开机启动" class="headerlink" title="3 开机启动"></a>3 开机启动</h2><p>在<code>/etc/rc.local</code>中添加<code>redis-server /etc/redis.conf</code></p><h1 id="2-编译Redis"><a href="#2-编译Redis" class="headerlink" title="2 编译Redis"></a>2 编译Redis</h1><h2 id="0-升级到gcc9"><a href="#0-升级到gcc9" class="headerlink" title="0 升级到gcc9"></a>0 升级到gcc9</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum -y install centos-release-scl</span><br><span class="line">yum -y install devtoolset-9-gcc devtoolset-9-gcc-c++ devtoolset-9-binutils</span><br></pre></td></tr></table></figure><p>升级到其他版本的gcc，把9改成相应版本</p><p>临时切换：<code>scl enable devtoolset-9 bash</code></p><p>永久切换：<code>echo “source /opt/rh/devtoolset-9/enable” &gt;&gt; /etc/profile</code></p><h2 id="1-下载redis"><a href="#1-下载redis" class="headerlink" title="1 下载redis"></a>1 下载redis</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://download.redis.io/releases/redis-6.2.6.tar.gz</span><br><span class="line">tar -zxvf redis-6.2.6.tar.gz</span><br></pre></td></tr></table></figure><h2 id="2-编译安装"><a href="#2-编译安装" class="headerlink" title="2 编译安装"></a>2 编译安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入解压目录</span></span><br><span class="line"><span class="built_in">cd</span> redis-6.2.6</span><br><span class="line"><span class="comment"># 编译</span></span><br><span class="line">make</span><br><span class="line"><span class="comment"># 安装到指定目录</span></span><br><span class="line">make install PREFIX=/usr/<span class="built_in">local</span>/redis</span><br></pre></td></tr></table></figure><h2 id="3-配置"><a href="#3-配置" class="headerlink" title="3 配置"></a>3 配置</h2><p>复制conf文件：<code>cp redis-6.2.6/redis.conf /usr/local/redis/</code></p><p>按照上文1.2修改</p><h2 id="4-启动服务"><a href="#4-启动服务" class="headerlink" title="4 启动服务"></a>4 启动服务</h2><p>可以按1.3设置开机启动，也可以创建服务redis.service</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /lib/systemd/system/</span><br><span class="line">vim redis.service</span><br></pre></td></tr></table></figure><p>文件内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=redis-server</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">ExecStart=/usr/local/redis/bin/redis-server /usr/local/redis/redis.conf</span><br><span class="line">PrivateTmp=true</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>设置开启自动启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开机自动启动</span></span><br><span class="line">systemctl <span class="built_in">enable</span> redis.service</span><br><span class="line"><span class="comment"># 启动redis服务</span></span><br><span class="line">systemctl start redis.service</span><br><span class="line"><span class="comment"># 查看服务状态</span></span><br><span class="line">systemctl status redis.service</span><br><span class="line"><span class="comment"># 停止服务</span></span><br><span class="line">systemctl stop redis.service</span><br><span class="line"><span class="comment"># 取消开机自动启动(卸载服务)</span></span><br><span class="line">systemctl disabled redis.service</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;0-安装Redis的两种方法&quot;&gt;&lt;a href=&quot;#0-安装Redis的两种方法&quot; class=&quot;headerlink&quot; title=&quot;0 安装Redis的两种方法&quot;&gt;&lt;/a&gt;0 安装Redis的两种方法&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;使用epel源安装Redis，目
      
    
    </summary>
    
      <category term="redis" scheme="http://yoursite.com/categories/redis/"/>
    
      <category term="CentOS" scheme="http://yoursite.com/categories/redis/CentOS/"/>
    
    
      <category term="CentOS" scheme="http://yoursite.com/tags/CentOS/"/>
    
      <category term="redis" scheme="http://yoursite.com/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>CentOS安装Mysql</title>
    <link href="http://yoursite.com/posts/d870030a/"/>
    <id>http://yoursite.com/posts/d870030a/</id>
    <published>2022-02-18T00:54:08.000Z</published>
    <updated>2022-10-08T05:50:46.839Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0-检查相关信息"><a href="#0-检查相关信息" class="headerlink" title="0 检查相关信息"></a>0 检查相关信息</h1><p>CentOS默认的是mariadb，需要先检查是否安装了mariadb，如果已安装则需要先卸载。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa | grep mysql</span><br><span class="line">rpm -qa | grep mariadb</span><br><span class="line">rpm -e --nodeps mariadb-libs-5.5.68-1.el7.x86_64</span><br><span class="line">rpm -qa | grep mariadb</span><br></pre></td></tr></table></figure><h1 id="1-安装MySQL官方源"><a href="#1-安装MySQL官方源" class="headerlink" title="1 安装MySQL官方源"></a>1 安装MySQL官方源</h1><p>下载yum repo。我的系统是centos 7.9，想安装mysql5.7</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm</span><br><span class="line">yum -y install mysql57-community-release-el7-11.noarch.rpm</span><br></pre></td></tr></table></figure><p>导入密钥：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm --import https://repo.mysql.com/RPM-GPG-KEY-mysql-2022</span><br></pre></td></tr></table></figure><h1 id="2-安装MySQL服务器"><a href="#2-安装MySQL服务器" class="headerlink" title="2 安装MySQL服务器"></a>2 安装MySQL服务器</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install mysql-community-server</span><br></pre></td></tr></table></figure><p>安装完成，启动服务，并查看状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl start mysqld.service</span><br><span class="line">systemctl status mysqld.service</span><br></pre></td></tr></table></figure><p>找到初始密码，登录数据库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">grep <span class="string">"password"</span> /var/<span class="built_in">log</span>/mysqld.log</span><br><span class="line">mysql -uroot -p</span><br></pre></td></tr></table></figure><h1 id="3-配置"><a href="#3-配置" class="headerlink" title="3 配置"></a>3 配置</h1><p>修改mysql配置文件<code>vim /etc/my.cnf</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">port=23306</span><br><span class="line">max_connections=200</span><br><span class="line">max_connect_errors=10</span><br><span class="line">character-set-server=utf8</span><br><span class="line">default-storage-engine=INNODB</span><br><span class="line"></span><br><span class="line">[mysql]</span><br><span class="line">default-character-set=utf8</span><br><span class="line"></span><br><span class="line">[client]</span><br><span class="line">port=23306</span><br><span class="line">default-character-set=utf8</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;0-检查相关信息&quot;&gt;&lt;a href=&quot;#0-检查相关信息&quot; class=&quot;headerlink&quot; title=&quot;0 检查相关信息&quot;&gt;&lt;/a&gt;0 检查相关信息&lt;/h1&gt;&lt;p&gt;CentOS默认的是mariadb，需要先检查是否安装了mariadb，如果已安装则需要先卸
      
    
    </summary>
    
      <category term="mysql" scheme="http://yoursite.com/categories/mysql/"/>
    
      <category term="CentOS" scheme="http://yoursite.com/categories/mysql/CentOS/"/>
    
    
      <category term="CentOS" scheme="http://yoursite.com/tags/CentOS/"/>
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>CentOS安装Java</title>
    <link href="http://yoursite.com/posts/9d608eb2/"/>
    <id>http://yoursite.com/posts/9d608eb2/</id>
    <published>2022-02-17T11:03:07.000Z</published>
    <updated>2022-10-08T05:50:33.985Z</updated>
    
    <content type="html"><![CDATA[<p>安装jdk的三种方法</p><a id="more"></a><h1 id="1-方法一：利用yum源来安装jdk"><a href="#1-方法一：利用yum源来安装jdk" class="headerlink" title="1 方法一：利用yum源来安装jdk"></a>1 方法一：利用yum源来安装jdk</h1><p>查看yum库中的java安装包 ：<code>yum -y list java*</code></p><p>安装需要的jdk版本的所有java程序：<code>yum -y install java-1.8.0-openjdk*</code></p><p>安装完之后，默认的安装目录是在:<code>/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.262.b10-1.el7.x86_64</code></p><p>不需要配置环境变量</p><h1 id="2-方法二：用rpm安装jdk"><a href="#2-方法二：用rpm安装jdk" class="headerlink" title="2 方法二：用rpm安装jdk"></a>2 方法二：用rpm安装jdk</h1><p>下载rpm文件</p><p>使用rpm命令安装： <code>rpm -ivh jdk-8u262-linux-x64.rpm</code></p><p>默认安装在/usr/java目录下</p><p>不需要配置环境变量</p><h1 id="3-方法三：手动解压JDK的压缩包，然后设置环境变量"><a href="#3-方法三：手动解压JDK的压缩包，然后设置环境变量" class="headerlink" title="3 方法三：手动解压JDK的压缩包，然后设置环境变量"></a>3 方法三：手动解压JDK的压缩包，然后设置环境变量</h1><ol start="0"><li><p>下载压缩包：<code>jdk-8u262-linux-x64.tar.gz</code></p></li><li><p>复制安装包到/usr/local/java目录中(目录可以自己选)：<code>cp jdk-8u262-linux-x64.tar.gz /usr/local/java</code></p></li><li><p>切换到/usr/local/java目录下：<code>cd /usr/local/java</code></p></li><li><p>解压缩包：<code>tar -zxvf jdk-8u262-linux-x64.tar.gz</code></p></li><li><p>配置环境变量</p><p>编辑profile文件：<code>vim /etc/profile</code></p><p>向文件里面追加以下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#set java environment</span><br><span class="line">JAVA_HOME=/usr/local/java/jdk1.8.0_262</span><br><span class="line">JRE_HOME=$JAVA_HOME/jre</span><br><span class="line">PATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/bin</span><br><span class="line">CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib</span><br><span class="line">export JAVA_HOME JRE_HOME PATH CLASSPATH</span><br></pre></td></tr></table></figure></li><li><p>使配置文件生效：<code>source /etc/profile</code></p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;安装jdk的三种方法&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
      <category term="CentOS" scheme="http://yoursite.com/categories/java/CentOS/"/>
    
    
      <category term="CentOS" scheme="http://yoursite.com/tags/CentOS/"/>
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>CentOS修改默认ssh端口</title>
    <link href="http://yoursite.com/posts/41de9613/"/>
    <id>http://yoursite.com/posts/41de9613/</id>
    <published>2022-02-15T08:57:49.000Z</published>
    <updated>2022-10-08T05:49:04.090Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0-前言"><a href="#0-前言" class="headerlink" title="0 前言"></a>0 前言</h1><p>服务器放在公网上，服务使用默认端口很容易被攻击，因此需要修改默认端口</p><a id="more"></a><h1 id="1-查看SELinux配置"><a href="#1-查看SELinux配置" class="headerlink" title="1 查看SELinux配置"></a>1 查看SELinux配置</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sestatus</span><br></pre></td></tr></table></figure><p>需要disabled</p><h1 id="2-修改sshd配置"><a href="#2-修改sshd配置" class="headerlink" title="2 修改sshd配置"></a>2 修改sshd配置</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure><p>#Port 22 去掉#，先保留22端口，防止新端口登录不上去。</p><p>添加新端口号，如12345，保存退出</p><h1 id="3-修改防火墙"><a href="#3-修改防火墙" class="headerlink" title="3 修改防火墙"></a>3 修改防火墙</h1><ol><li><p>添加规则</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --permanent --zone=public --add-port=12345/tcp</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure></li><li><p>CentOS 7出现<code>FirewallD is not running</code>，原来的iptables被firewalld取代。也可以不启用。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl unmask firewalld</span><br><span class="line">systemctl start firewalld</span><br></pre></td></tr></table></figure></li><li><p>检查</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --permanent --query-port=12345/tcp</span><br></pre></td></tr></table></figure></li><li><p>如果是云服务器，则需要在网页上放行端口</p></li></ol><h1 id="4-重启SSH"><a href="#4-重启SSH" class="headerlink" title="4 重启SSH"></a>4 重启SSH</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart sshd.service</span><br></pre></td></tr></table></figure><h1 id="5-验证"><a href="#5-验证" class="headerlink" title="5 验证"></a>5 验证</h1><p>使用新的端口连接，如果成功，删除22端口，重启ssh服务</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;0-前言&quot;&gt;&lt;a href=&quot;#0-前言&quot; class=&quot;headerlink&quot; title=&quot;0 前言&quot;&gt;&lt;/a&gt;0 前言&lt;/h1&gt;&lt;p&gt;服务器放在公网上，服务使用默认端口很容易被攻击，因此需要修改默认端口&lt;/p&gt;
    
    </summary>
    
      <category term="安全" scheme="http://yoursite.com/categories/%E5%AE%89%E5%85%A8/"/>
    
      <category term="OpenSSH" scheme="http://yoursite.com/categories/%E5%AE%89%E5%85%A8/OpenSSH/"/>
    
      <category term="CentOS" scheme="http://yoursite.com/categories/%E5%AE%89%E5%85%A8/OpenSSH/CentOS/"/>
    
    
      <category term="安全" scheme="http://yoursite.com/tags/%E5%AE%89%E5%85%A8/"/>
    
      <category term="CentOS" scheme="http://yoursite.com/tags/CentOS/"/>
    
  </entry>
  
  <entry>
    <title>CentOS7配置官方Nginx源</title>
    <link href="http://yoursite.com/posts/c9280d44/"/>
    <id>http://yoursite.com/posts/c9280d44/</id>
    <published>2022-02-07T01:02:58.000Z</published>
    <updated>2022-10-08T05:50:10.267Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0-前言"><a href="#0-前言" class="headerlink" title="0. 前言"></a>0. 前言</h1><p>在CentOS下，yum源不提供nginx的安装，需要去官网下载源代码，本地编译后安装。也可以自己配置yum源，这样安装简单，以后升级也更方便。唯一的问题是不能修改server: nginx的返回参数，有信息泄露的风险。</p><a id="more"></a><h1 id="1-配置yum源"><a href="#1-配置yum源" class="headerlink" title="1. 配置yum源"></a>1. 配置yum源</h1><p>在<code>/etc/yum.repo.d/</code>目录下，创建<code>nginx.repo</code>文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[nginx-stable]</span><br><span class="line">name=nginx stable repo</span><br><span class="line">baseurl=http://nginx.org/packages/centos/$releasever/$basearch/</span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=1</span><br><span class="line">gpgkey=https://nginx.org/keys/nginx_signing.key</span><br><span class="line">module_hotfixes=true</span><br><span class="line"></span><br><span class="line">[nginx-mainline]</span><br><span class="line">name=nginx mainline repo</span><br><span class="line">baseurl=http://nginx.org/packages/mainline/centos/$releasever/$basearch/</span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=0</span><br><span class="line">gpgkey=https://nginx.org/keys/nginx_signing.key</span><br><span class="line">module_hotfixes=true</span><br></pre></td></tr></table></figure><h1 id="2-安装nginx"><a href="#2-安装nginx" class="headerlink" title="2. 安装nginx"></a>2. 安装nginx</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install nginx</span><br></pre></td></tr></table></figure><h1 id="3-启动nginx"><a href="#3-启动nginx" class="headerlink" title="3. 启动nginx"></a>3. 启动nginx</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl start nginx.service</span><br><span class="line">systemctl status nginx.service</span><br></pre></td></tr></table></figure><h1 id="4-加入开机启动"><a href="#4-加入开机启动" class="headerlink" title="4. 加入开机启动"></a>4. 加入开机启动</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> nginx.service</span><br></pre></td></tr></table></figure><h1 id="5-后续。。。"><a href="#5-后续。。。" class="headerlink" title="5. 后续。。。"></a>5. 后续。。。</h1><p>要改response header中的server信息，需要修改<code>src/http/ngx_http_header_filter_module.c</code>后编译。</p><p>先怎么简单怎么来吧，这些以后再说</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;0-前言&quot;&gt;&lt;a href=&quot;#0-前言&quot; class=&quot;headerlink&quot; title=&quot;0. 前言&quot;&gt;&lt;/a&gt;0. 前言&lt;/h1&gt;&lt;p&gt;在CentOS下，yum源不提供nginx的安装，需要去官网下载源代码，本地编译后安装。也可以自己配置yum源，这样安装简单，以后升级也更方便。唯一的问题是不能修改server: nginx的返回参数，有信息泄露的风险。&lt;/p&gt;
    
    </summary>
    
      <category term="nginx" scheme="http://yoursite.com/categories/nginx/"/>
    
      <category term="CentOS" scheme="http://yoursite.com/categories/nginx/CentOS/"/>
    
    
      <category term="nginx" scheme="http://yoursite.com/tags/nginx/"/>
    
      <category term="CentOS" scheme="http://yoursite.com/tags/CentOS/"/>
    
  </entry>
  
  <entry>
    <title>新的征程</title>
    <link href="http://yoursite.com/posts/f3e51dc5/"/>
    <id>http://yoursite.com/posts/f3e51dc5/</id>
    <published>2022-01-28T00:59:42.000Z</published>
    <updated>2022-02-16T00:45:42.633Z</updated>
    
    <content type="html"><![CDATA[<p>计划和同事一起做个网站，以一个初学者的视角，记录一下整个过程，事无巨细。</p><p>年后开始。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;计划和同事一起做个网站，以一个初学者的视角，记录一下整个过程，事无巨细。&lt;/p&gt;
&lt;p&gt;年后开始。&lt;/p&gt;

      
    
    </summary>
    
      <category term="计划" scheme="http://yoursite.com/categories/%E8%AE%A1%E5%88%92/"/>
    
    
      <category term="计划" scheme="http://yoursite.com/tags/%E8%AE%A1%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>CentOS 7 升级OpenSSH</title>
    <link href="http://yoursite.com/posts/c5148ef8/"/>
    <id>http://yoursite.com/posts/c5148ef8/</id>
    <published>2021-10-18T07:20:30.000Z</published>
    <updated>2022-10-08T05:48:00.254Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0-背景"><a href="#0-背景" class="headerlink" title="0 背景"></a>0 背景</h1><p>智慧办给我们发了个漏扫报告，提及了OpenSSH的漏洞。CentOS 7.x 的yum仓库中OpenSSH最高版本是7.4，需要升级版本修补漏洞。</p><a id="more"></a><h1 id="1-准备工作-安装telnet"><a href="#1-准备工作-安装telnet" class="headerlink" title="1 准备工作 - 安装telnet"></a>1 准备工作 - 安装telnet</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">yum install telnet-server -y</span><br><span class="line">mv /etc/securetty /etc/securetty.bak</span><br><span class="line">systemctl <span class="built_in">enable</span> telnet.socket</span><br><span class="line">systemctl restart telnet.socket</span><br><span class="line">firewall-cmd --add-port=23/tcp --permanent</span><br><span class="line">firewall-cmd --reload</span><br><span class="line">netstat -ntlp</span><br></pre></td></tr></table></figure><h1 id="2-编译打包成rpm"><a href="#2-编译打包成rpm" class="headerlink" title="2 编译打包成rpm"></a>2 编译打包成rpm</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">OPENSSH_VERSION=8.8p1</span><br><span class="line"></span><br><span class="line">yum -y install  vim  wget epel-release</span><br><span class="line">yum -y install  rpm-build  gcc make</span><br><span class="line">yum -y install  openssl  openssl-devel krb5-devel pam-devel libX11-devel xmkmf libXt-devel</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /root</span><br><span class="line">wget http://ftp.openbsd.org/pub/OpenBSD/OpenSSH/portable/openssh-<span class="variable">$&#123;OPENSSH_VERSION&#125;</span>.tar.gz</span><br><span class="line">sha1sum openssh-8.8p1.tar.gz</span><br><span class="line">sha256sum openssh-8.8p1.tar.gz | cut -f1 -d <span class="string">' '</span> | xxd -r -p | base64</span><br><span class="line"></span><br><span class="line">tar -zxf  openssh-<span class="variable">$&#123;OPENSSH_VERSION&#125;</span>.tar.gz</span><br><span class="line">mkdir -p /root/rpmbuild/&#123;SOURCES,SPECS&#125;</span><br><span class="line"></span><br><span class="line">cp ./openssh-<span class="variable">$&#123;OPENSSH_VERSION&#125;</span>/contrib/redhat/openssh.spec /root/rpmbuild/SPECS/</span><br><span class="line">cp openssh-<span class="variable">$&#123;OPENSSH_VERSION&#125;</span>.tar.gz /root/rpmbuild/SOURCES/</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /root/rpmbuild/SPECS/</span><br><span class="line">sed -i -e <span class="string">"s/%global no_gnome_askpass 0/%define no_gnome_askpass 1/g"</span> openssh.spec</span><br><span class="line">sed -i -e <span class="string">"s/%global no_x11_askpass 0/%define no_x11_askpass 1/g"</span> openssh.spec</span><br><span class="line">sed -i -e <span class="string">"s/BuildPreReq/BuildRequires/g"</span> openssh.spec</span><br><span class="line">sed -i -e  <span class="string">"s/BuildRequires: openssl-devel &lt; 1.1/#BuildRequires: openssl-devel &lt; 1.1/g"</span> openssh.spec</span><br><span class="line"></span><br><span class="line">rpmbuild -bb openssh.spec</span><br><span class="line">ls -l /root/rpmbuild/RPMS/x86_64</span><br></pre></td></tr></table></figure><h1 id="3-制作本地仓库安装包"><a href="#3-制作本地仓库安装包" class="headerlink" title="3 制作本地仓库安装包"></a>3 制作本地仓库安装包</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">yum -y install yum-utils createrepo</span><br><span class="line">mkdir /opt/localrepo</span><br><span class="line">repotrack openssl -p /opt/localrepo/</span><br><span class="line">cp /root/rpmbuild/RPMS/x86_64/*.rpm  /opt/localrepo</span><br><span class="line">createrepo -v /opt/localrepo</span><br></pre></td></tr></table></figure><h1 id="4-编辑本地yum-repo配置文件"><a href="#4-编辑本地yum-repo配置文件" class="headerlink" title="4 编辑本地yum.repo配置文件"></a>4 编辑本地yum.repo配置文件</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"[localrepo]"</span> &gt; /etc/yum.repos.d/localrepo.repo</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"name=Local Repository"</span> &gt;&gt; /etc/yum.repos.d/localrepo.repo</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"baseurl=file:///opt/localrepo"</span> &gt;&gt; /etc/yum.repos.d/localrepo.repo</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"gpgcheck=0"</span> &gt;&gt; /etc/yum.repos.d/localrepo.repo</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"enabled=1"</span> &gt;&gt; /etc/yum.repos.d/localrepo.repo</span><br></pre></td></tr></table></figure><h1 id="5-升级OpenSSH并配置"><a href="#5-升级OpenSSH并配置" class="headerlink" title="5 升级OpenSSH并配置"></a>5 升级OpenSSH并配置</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">yum clean all</span><br><span class="line">yum -y install openssl --disablerepo=<span class="string">"*"</span> --enablerepo=<span class="string">"localrepo"</span></span><br><span class="line">yum -y install openssh* --disablerepo=<span class="string">"*"</span> --enablerepo=<span class="string">"localrepo"</span></span><br><span class="line"></span><br><span class="line">chmod 600 /etc/ssh/ssh_host_*_key</span><br><span class="line"></span><br><span class="line"><span class="comment"># modify /etc/ssh/sshd_config</span></span><br><span class="line">cp /etc/ssh/sshd_config /etc/ssh/sshd_config.bak</span><br><span class="line"></span><br><span class="line">sed -i -e <span class="string">"s/#PasswordAuthentication yes/PasswordAuthentication yes/g"</span> /etc/ssh/sshd_config</span><br><span class="line">sed -i -e <span class="string">"s/#PermitRootLogin prohibit-password/PermitRootLogin yes/g"</span> /etc/ssh/sshd_config</span><br><span class="line">sed -i -e <span class="string">"s/#PermitEmptyPasswords no/PermitEmptyPasswords no/g"</span> /etc/ssh/sshd_config</span><br><span class="line">sed -i -e <span class="string">"s/#UsePAM no/UsePAM yes/g"</span> /etc/ssh/sshd_config</span><br><span class="line"></span><br><span class="line"><span class="comment"># modify /etc/pam.d/sshd</span></span><br><span class="line">cp /etc/pam.d/sshd /etc/pam.d/sshd.bak</span><br><span class="line">cat &gt; /etc/pam.d/sshd &lt;&lt;EOF</span><br><span class="line"><span class="comment">#%PAM-1.0</span></span><br><span class="line">auth required pam_sepermit.so</span><br><span class="line">auth include password-auth</span><br><span class="line">account required pam_nologin.so</span><br><span class="line">account include password-auth</span><br><span class="line">password include password-auth</span><br><span class="line"></span><br><span class="line"><span class="comment"># pam_selinux.so close should be the first session rule</span></span><br><span class="line">session required pam_selinux.so close</span><br><span class="line">session required pam_loginuid.so</span><br><span class="line"></span><br><span class="line"><span class="comment"># pam_selinux.so open should only be followed by sessions to be executed in the user context</span></span><br><span class="line">session required pam_selinux.so open env_params</span><br><span class="line">session optional pam_keyinit.so force revoke</span><br><span class="line">session include password-auth</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># copy ssh-copy-id</span></span><br><span class="line">cp /root/openssh-7.9p1/contrib/ssh-copy-id /usr/bin</span><br><span class="line">chmod 755 /usr/bin/ssh-copy-id</span><br><span class="line"></span><br><span class="line">systemctl restart sshd</span><br><span class="line">systemctl <span class="built_in">enable</span> sshd</span><br><span class="line">systemctl status sshd</span><br><span class="line"></span><br><span class="line">rpm -qa | grep open</span><br><span class="line">systemctl status  sshd| grep  <span class="string">"Active: active (running)"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ $? -eq 0 ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">"[INFO] OpenSSH upgraded to 8.8p1  successfully"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">"\033[31m[ERROR] OpenSSH upgraded to 8.8p1 faild\033[0m"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h1 id="6-清理"><a href="#6-清理" class="headerlink" title="6 清理"></a>6 清理</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop telnet.socket</span><br><span class="line">systemctl <span class="built_in">disable</span> telnet.socket</span><br><span class="line">yum remove telnet-server -y</span><br><span class="line">mv /etc/securetty.bak /etc/securetty</span><br><span class="line">firewall-cmd --remove-port=23/tcp --permanent</span><br><span class="line">firewall-cmd --reload</span><br><span class="line">netstat -ntlp</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;0-背景&quot;&gt;&lt;a href=&quot;#0-背景&quot; class=&quot;headerlink&quot; title=&quot;0 背景&quot;&gt;&lt;/a&gt;0 背景&lt;/h1&gt;&lt;p&gt;智慧办给我们发了个漏扫报告，提及了OpenSSH的漏洞。CentOS 7.x 的yum仓库中OpenSSH最高版本是7.4，需要升级版本修补漏洞。&lt;/p&gt;
    
    </summary>
    
      <category term="安全" scheme="http://yoursite.com/categories/%E5%AE%89%E5%85%A8/"/>
    
      <category term="CentOS" scheme="http://yoursite.com/categories/%E5%AE%89%E5%85%A8/CentOS/"/>
    
    
      <category term="安全" scheme="http://yoursite.com/tags/%E5%AE%89%E5%85%A8/"/>
    
      <category term="OpenSSH" scheme="http://yoursite.com/tags/OpenSSH/"/>
    
  </entry>
  
  <entry>
    <title>在Ubuntu中搭建KMS服务器</title>
    <link href="http://yoursite.com/posts/2aaa4e0b/"/>
    <id>http://yoursite.com/posts/2aaa4e0b/</id>
    <published>2019-07-16T13:26:06.000Z</published>
    <updated>2020-08-27T07:24:16.693Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>今天同学问我要office的注册码，我说我家都是在路由器上安装的KMS激活服务器。为了给同学们用，我准备在我的VPS上搭建KMS服务器。</p><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>基于<a href="https://github.com/Wind4/vlmcsd" target="_blank" rel="noopener">vlmcsd</a>搭建的KMS服务器。<br>根据github上的说明，这个工具是用C写的，没有任何依赖，可以直接运行。而且它横跨几乎现在所有的系统平台，如Android, FreeBSD, Solaris, Minix, Mac OS, iOS, Windows。相比于另一款工具<a href="https://github.com/myanaloglife/py-kms" target="_blank" rel="noopener">py-kms</a>需要依赖pyhont2或者python3，可谓是非常干净舒爽。</p><a id="more"></a><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><ol><li><p>在任意环境中，下载最新的vlmcsd releases版本，<a href="https://github.com/Wind4/vlmcsd/releases" target="_blank" rel="noopener">下载地址</a>。如在linux中，可以使用wget下载：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/Wind4/vlmcsd/releases/download/svn1112/binaries.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>解压我们下载的包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xzvf binaries.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>进入对应的目录。如Ubuntu系统，我们可以进入binaries/Linux/intel/static目录中</p></li><li><p>选择对应的文件，这里我们选择vlmcsdmulti-x64-musl-static文件。然后把这个文件放到我们想要的文件中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv vlmcsdmulti-x64-musl-static /usr/<span class="built_in">local</span>/kms-server</span><br></pre></td></tr></table></figure></li><li><p>执行chmod命令，为这个文件赋予权限：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod u+x /usr/<span class="built_in">local</span>/kms-server</span><br></pre></td></tr></table></figure><p>权限赋予完毕之后，直接执行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/kms-server/vlmcsdmulti-x64-musl-static vlmcsd</span><br></pre></td></tr></table></figure><p>如果没有任何错误提示，代表我们成功了。不放心的话，可以再执行一遍，会提示我们端口(1688)和地址已经被占用。</p></li><li><p>若有防火墙，记得把1688端口开放，然后加入自启动。如在Ubuntu中，可以编辑/etc/rc.local文件，在启动项里加入启动命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/kms-server/vlmcsdmulti-x64-musl-static vlmcsd</span><br></pre></td></tr></table></figure></li></ol><h1 id="激活"><a href="#激活" class="headerlink" title="激活"></a>激活</h1><h2 id="激活Windows"><a href="#激活Windows" class="headerlink" title="激活Windows"></a>激活Windows</h2><ol><li><p>复制以下文本</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /d "<span class="variable">%SystemRoot%</span>\system32"</span><br><span class="line">slmgr.vbs -ipk windoes对应版本的GVLK</span><br><span class="line">slmgr.vbs -skms 你的VPS的IP或者域名</span><br><span class="line">slmgr.vbs -ato</span><br><span class="line">slmgr.vbs /xpr</span><br></pre></td></tr></table></figure><p>存成bat格式的文件，然后右键以<strong>管理员身份</strong>运行。</p></li><li><p>验证是否激活。在cmd或powershell中执行</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">slmgr.vbs -dlv</span><br></pre></td></tr></table></figure><p>不出意外的话，会显示已经激活成功的信息。</p></li></ol><h2 id="激活office"><a href="#激活office" class="headerlink" title="激活office"></a>激活office</h2><p>   同理</p>   <figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> office目录，比如C:\Program Files\Microsoft Office\Office15</span><br><span class="line">cscript ospp.vbs /inpkey:office对应版本的GVLK</span><br><span class="line">cscript ospp.vbs /sethst:你的VPS的IP或者域名</span><br><span class="line">cscript ospp.vbs /act</span><br></pre></td></tr></table></figure><h2 id="附录：GVLKs"><a href="#附录：GVLKs" class="headerlink" title="附录：GVLKs"></a>附录：GVLKs</h2><p>来自原作者的<a href="http://wind4.github.io/vlmcsd/" target="_blank" rel="noopener">github pages</a></p><h3 id="Windows-10"><a href="#Windows-10" class="headerlink" title="Windows 10"></a>Windows 10</h3><table><thead><tr><th>Operating system edition</th><th>KMS Client Setup Key</th></tr></thead><tbody><tr><td>Windows 10 Core</td><td>TX9XD-98N7V-6WMQ6-BX7FG-H8Q99</td></tr><tr><td>Windows 10 Core N</td><td>3KHY7-WNT83-DGQKR-F7HPR-844BM</td></tr><tr><td>Windows 10 Core Country Specific</td><td>PVMJN-6DFY6-9CCP6-7BKTT-D3WVR</td></tr><tr><td>Windows 10 Core Single Language</td><td>7HNRX-D7KGG-3K4RQ-4WPJ4-YTDFH</td></tr><tr><td>Windows 10 Professional</td><td>W269N-WFGWX-YVC9B-4J6C9-T83GX</td></tr><tr><td>Windows 10 Professional N</td><td>MH37W-N47XK-V7XM9-C7227-GCQG9</td></tr><tr><td>Windows 10 Enterprise</td><td>NPPR9-FWDCX-D2C8J-H872K-2YT43</td></tr><tr><td>Windows 10 Enterprise N</td><td>DPH2V-TTNVB-4X9Q3-TJR4H-KHJW4</td></tr><tr><td>Windows 10 Education</td><td>NW6C2-QMPVW-D7KKK-3GKT6-VCFB2</td></tr><tr><td>Windows 10 Education N</td><td>2WH4N-8QGBV-H22JP-CT43Q-MDWWJ</td></tr><tr><td>Windows 10 Enterprise 2015 LTSB</td><td>WNMTR-4C88C-JK8YV-HQ7T2-76DF9</td></tr><tr><td>Windows 10 Enterprise 2015 LTSB N</td><td>2F77B-TNFGY-69QQF-B8YKP-D69TJ</td></tr><tr><td>Windows 10 Enterprise 2016 LTSB</td><td>DCPHK-NFMTC-H88MJ-PFHPY-QJ4BJ</td></tr><tr><td>Windows 10 Enterprise 2016 LTSB N</td><td>QFFDN-GRT3P-VKWWX-X7T3R-8B639</td></tr></tbody></table><h3 id="Windows-8-8-1"><a href="#Windows-8-8-1" class="headerlink" title="Windows 8 / 8.1"></a>Windows 8 / 8.1</h3><table><thead><tr><th>Operating system edition</th><th>KMS Client Setup Key</th></tr></thead><tbody><tr><td>Windows 8 Professional</td><td>NG4HW-VH26C-733KW-K6F98-J8CK4</td></tr><tr><td>Windows 8 Professional N</td><td>XCVCF-2NXM9-723PB-MHCB7-2RYQQ</td></tr><tr><td>Windows 8 Enterprise</td><td>32JNW-9KQ84-P47T8-D8GGY-CWCK7</td></tr><tr><td>Windows 8 Enterprise N</td><td>JMNMF-RHW7P-DMY6X-RF3DR-X2BQT</td></tr><tr><td>Windows Embedded 8 Industry Professional</td><td>RYXVT-BNQG7-VD29F-DBMRY-HT73M</td></tr><tr><td>Windows Embedded 8 Industry Enterprise</td><td>NKB3R-R2F8T-3XCDP-7Q2KW-XWYQ2</td></tr><tr><td>Windows 8.1 Professional</td><td>GCRJD-8NW9H-F2CDX-CCM8D-9D6T9</td></tr><tr><td>Windows 8.1 Professional N</td><td>HMCNV-VVBFX-7HMBH-CTY9B-B4FXY</td></tr><tr><td>Windows 8.1 Enterprise</td><td>MHF9N-XY6XB-WVXMC-BTDCT-MKKG7</td></tr><tr><td>Windows 8.1 Enterprise N</td><td>TT4HM-HN7YT-62K67-RGRQJ-JFFXW</td></tr><tr><td>Windows Embedded 8.1 Industry Pro</td><td>NMMPB-38DD4-R2823-62W8D-VXKJB</td></tr><tr><td>Windows Embedded 8.1 Industry Enterprise</td><td>FNFKF-PWTVT-9RC8H-32HB2-JB34X</td></tr></tbody></table><h3 id="Windows-7"><a href="#Windows-7" class="headerlink" title="Windows 7"></a>Windows 7</h3><table><thead><tr><th>Operating system edition</th><th>KMS Client Setup Key</th></tr></thead><tbody><tr><td>Windows 7 Professional</td><td>FJ82H-XT6CR-J8D7P-XQJJ2-GPDD4</td></tr><tr><td>Windows 7 Professional N</td><td>MRPKT-YTG23-K7D7T-X2JMM-QY7MG</td></tr><tr><td>Windows 7 Professional E</td><td>W82YF-2Q76Y-63HXB-FGJG9-GF7QX</td></tr><tr><td>Windows 7 Enterprise</td><td>33PXH-7Y6KF-2VJC9-XBBR8-HVTHH</td></tr><tr><td>Windows 7 Enterprise N</td><td>YDRBP-3D83W-TY26F-D46B2-XCKRJ</td></tr><tr><td>Windows 7 Enterprise E</td><td>C29WB-22CC8-VJ326-GHFJW-H9DH4</td></tr></tbody></table><h3 id="Windows-Server-2016"><a href="#Windows-Server-2016" class="headerlink" title="Windows Server 2016"></a>Windows Server 2016</h3><table><thead><tr><th>Operating system edition</th><th>KMS Client Setup Key</th></tr></thead><tbody><tr><td>Windows Server 2016 Datacenter</td><td>CB7KF-BWN84-R7R2Y-793K2-8XDDG</td></tr><tr><td>Windows Server 2016 Standard</td><td>WC2BQ-8NRM3-FDDYY-2BFGV-KHKQY</td></tr><tr><td>Windows Server 2016 Essentials</td><td>JCKRF-N37P4-C2D82-9YXRT-4M63B</td></tr></tbody></table><h3 id="Windows-Server-2012"><a href="#Windows-Server-2012" class="headerlink" title="Windows Server 2012"></a>Windows Server 2012</h3><table><thead><tr><th>Operating system edition</th><th>KMS Client Setup Key</th></tr></thead><tbody><tr><td>Windows Server 2012</td><td>BN3D2-R7TKB-3YPBD-8DRP2-27GG4</td></tr><tr><td>Windows Server 2012 N</td><td>8N2M2-HWPGY-7PGT9-HGDD8-GVGGY</td></tr><tr><td>Windows Server 2012 Single Language</td><td>2WN2H-YGCQR-KFX6K-CD6TF-84YXQ</td></tr><tr><td>Windows Server 2012 Country Specific</td><td>4K36P-JN4VD-GDC6V-KDT89-DYFKP</td></tr><tr><td>Windows Server 2012 Server Standard</td><td>XC9B7-NBPP2-83J2H-RHMBY-92BT4</td></tr><tr><td>Windows Server 2012 MultiPoint Standard</td><td>HM7DN-YVMH3-46JC3-XYTG7-CYQJJ</td></tr><tr><td>Windows Server 2012 MultiPoint Premium</td><td>XNH6W-2V9GX-RGJ4K-Y8X6F-QGJ2G</td></tr><tr><td>Windows Server 2012 Datacenter</td><td>48HP8-DN98B-MYWDG-T2DCC-8W83P</td></tr><tr><td>Windows Server 2012 R2 Server Standard</td><td>D2N9P-3P6X9-2R39C-7RTCD-MDVJX</td></tr><tr><td>Windows Server 2012 R2 Datacenter</td><td>W3GGN-FT8W3-Y4M27-J84CP-Q3VJ9</td></tr><tr><td>Windows Server 2012 R2 Essentials</td><td>KNC87-3J2TX-XB4WP-VCPJV-M4FWM</td></tr></tbody></table><h3 id="Windows-Server-2008"><a href="#Windows-Server-2008" class="headerlink" title="Windows Server 2008"></a>Windows Server 2008</h3><table><thead><tr><th>Operating system edition</th><th>KMS Client Setup Key</th></tr></thead><tbody><tr><td>Windows Server 2008 Web</td><td>WYR28-R7TFJ-3X2YQ-YCY4H-M249D</td></tr><tr><td>Windows Server 2008 Standard</td><td>TM24T-X9RMF-VWXK6-X8JC9-BFGM2</td></tr><tr><td>Windows Server 2008 Standard without Hyper-V</td><td>W7VD6-7JFBR-RX26B-YKQ3Y-6FFFJ</td></tr><tr><td>Windows Server 2008 Enterprise</td><td>YQGMW-MPWTJ-34KDK-48M3W-X4Q6V</td></tr><tr><td>Windows Server 2008 Enterprise without Hyper-V</td><td>39BXF-X8Q23-P2WWT-38T2F-G3FPG</td></tr><tr><td>Windows Server 2008 HPC</td><td>RCTX3-KWVHP-BR6TB-RB6DM-6X7HP</td></tr><tr><td>Windows Server 2008 Datacenter</td><td>7M67G-PC374-GR742-YH8V4-TCBY3</td></tr><tr><td>Windows Server 2008 Datacenter without Hyper-V</td><td>22XQ2-VRXRG-P8D42-K34TD-G3QQC</td></tr><tr><td>Windows Server 2008 for Itanium-Based Systems</td><td>4DWFP-JF3DJ-B7DTH-78FJB-PDRHK</td></tr><tr><td>Windows Server 2008 R2 Web</td><td>6TPJF-RBVHG-WBW2R-86QPH-6RTM4</td></tr><tr><td>Windows Server 2008 R2 HPC edition</td><td>TT8MH-CG224-D3D7Q-498W2-9QCTX</td></tr><tr><td>Windows Server 2008 R2 Standard</td><td>YC6KT-GKW9T-YTKYR-T4X34-R7VHC</td></tr><tr><td>Windows Server 2008 R2 Enterprise</td><td>489J6-VHDMP-X63PK-3K798-CPX3Y</td></tr><tr><td>Windows Server 2008 R2 Datacenter</td><td>74YFP-3QFB3-KQT8W-PMXWJ-7M648</td></tr><tr><td>Windows Server 2008 R2 for Itanium-based Systems</td><td>GT63C-RJFQ3-4GMB6-BRFB9-CB83V</td></tr></tbody></table><h3 id="Office-2019"><a href="#Office-2019" class="headerlink" title="Office 2019"></a>Office 2019</h3><table><thead><tr><th>Product</th><th>GVLK</th></tr></thead><tbody><tr><td>Office Professional Plus 2019</td><td>NMMKJ-6RK4F-KMJVX-8D9MJ-6MWKP</td></tr><tr><td>Office Standard 2019</td><td>6NWWJ-YQWMR-QKGCB-6TMB3-9D9HK</td></tr><tr><td>Project Professional 2019</td><td>B4NPR-3FKK7-T2MBV-FRQ4W-PKD2B</td></tr><tr><td>Project Standard 2019</td><td>C4F7P-NCP8C-6CQPT-MQHV9-JXD2M</td></tr><tr><td>Visio Professional 2019</td><td>9BGNQ-K37YR-RQHF2-38RQ3-7VCBB</td></tr><tr><td>Visio Standard 2019</td><td>7TQNQ-K3YQQ-3PFH7-CCPPM-X4VQ2</td></tr><tr><td>Access 2019</td><td>9N9PT-27V4Y-VJ2PD-YXFMF-YTFQT</td></tr><tr><td>Excel 2019</td><td>TMJWT-YYNMB-3BKTF-644FC-RVXBD</td></tr><tr><td>Outlook 2019</td><td>7HD7K-N4PVK-BHBCQ-YWQRW-XW4VK</td></tr><tr><td>PowerPoint 2019</td><td>RRNCX-C64HY-W2MM7-MCH9G-TJHMQ</td></tr><tr><td>Publisher 2019</td><td>G2KWX-3NW6P-PY93R-JXK2T-C9Y9V</td></tr><tr><td>Skype for Business 2019</td><td>NCJ33-JHBBY-HTK98-MYCV8-HMKHJ</td></tr><tr><td>Word 2019</td><td>PBX3G-NWMT6-Q7XBW-PYJGG-WXD33</td></tr></tbody></table><h3 id="Office-2016"><a href="#Office-2016" class="headerlink" title="Office 2016"></a>Office 2016</h3><table><thead><tr><th>Product</th><th>GVLK</th></tr></thead><tbody><tr><td>Office Professional Plus 2016</td><td>XQNVK-8JYDB-WJ9W3-YJ8YR-WFG99</td></tr><tr><td>Office Standard 2016</td><td>JNRGM-WHDWX-FJJG3-K47QV-DRTFM</td></tr><tr><td>Project Professional 2016</td><td>YG9NW-3K39V-2T3HJ-93F3Q-G83KT</td></tr><tr><td>Project Standard 2016</td><td>GNFHQ-F6YQM-KQDGJ-327XX-KQBVC</td></tr><tr><td>Visio Professional 2016</td><td>PD3PC-RHNGV-FXJ29-8JK7D-RJRJK</td></tr><tr><td>Visio Standard 2016</td><td>7WHWN-4T7MP-G96JF-G33KR-W8GF4</td></tr><tr><td>Access 2016</td><td>GNH9Y-D2J4T-FJHGG-QRVH7-QPFDW</td></tr><tr><td>Excel 2016</td><td>9C2PK-NWTVB-JMPW8-BFT28-7FTBF</td></tr><tr><td>OneNote 2016</td><td>DR92N-9HTF2-97XKM-XW2WJ-XW3J6</td></tr><tr><td>Outlook 2016</td><td>R69KK-NTPKF-7M3Q4-QYBHW-6MT9B</td></tr><tr><td>PowerPoint 2016</td><td>J7MQP-HNJ4Y-WJ7YM-PFYGF-BY6C6</td></tr><tr><td>Publisher 2016</td><td>F47MM-N3XJP-TQXJ9-BP99D-8K837</td></tr><tr><td>Skype for Business 2016</td><td>869NQ-FJ69K-466HW-QYCP2-DDBV6</td></tr><tr><td>Word 2016</td><td>WXY84-JN2Q9-RBCCQ-3Q3J3-3PFJ6</td></tr></tbody></table><h3 id="Office-2013"><a href="#Office-2013" class="headerlink" title="Office 2013"></a>Office 2013</h3><table><thead><tr><th>Product</th><th>GVLK</th></tr></thead><tbody><tr><td>Office 2013 Professional Plus</td><td>YC7DK-G2NP3-2QQC3-J6H88-GVGXT</td></tr><tr><td>Office 2013 Standard</td><td>KBKQT-2NMXY-JJWGP-M62JB-92CD4</td></tr><tr><td>Project 2013 Professional</td><td>FN8TT-7WMH6-2D4X9-M337T-2342K</td></tr><tr><td>Project 2013 Standard</td><td>6NTH3-CW976-3G3Y2-JK3TX-8QHTT</td></tr><tr><td>Visio 2013 Professional</td><td>C2FG9-N6J68-H8BTJ-BW3QX-RM3B3</td></tr><tr><td>Visio 2013 Standard</td><td>J484Y-4NKBF-W2HMG-DBMJC-PGWR7</td></tr><tr><td>Access 2013</td><td>NG2JY-H4JBT-HQXYP-78QH9-4JM2D</td></tr><tr><td>Excel 2013</td><td>VGPNG-Y7HQW-9RHP7-TKPV3-BG7GB</td></tr><tr><td>InfoPath 2013</td><td>DKT8B-N7VXH-D963P-Q4PHY-F8894</td></tr><tr><td>Lync 2013</td><td>2MG3G-3BNTT-3MFW9-KDQW3-TCK7R</td></tr><tr><td>OneNote 2013</td><td>TGN6P-8MMBC-37P2F-XHXXK-P34VW</td></tr><tr><td>Outlook 2013</td><td>QPN8Q-BJBTJ-334K3-93TGY-2PMBT</td></tr><tr><td>PowerPoint 2013</td><td>4NT99-8RJFH-Q2VDH-KYG2C-4RD4F</td></tr><tr><td>Publisher 2013</td><td>PN2WF-29XG2-T9HJ7-JQPJR-FCXK4</td></tr><tr><td>Word 2013</td><td>6Q7VD-NX8JD-WJ2VH-88V73-4GBJ7</td></tr></tbody></table><h3 id="Office-2010"><a href="#Office-2010" class="headerlink" title="Office 2010"></a>Office 2010</h3><table><thead><tr><th>Product</th><th>GVLK</th></tr></thead><tbody><tr><td>Office Professional Plus 2010</td><td>VYBBJ-TRJPB-QFQRF-QFT4D-H3GVB</td></tr><tr><td>Office Standard 2010</td><td>V7QKV-4XVVR-XYV4D-F7DFM-8R6BM</td></tr><tr><td>Access 2010</td><td>V7Y44-9T38C-R2VJK-666HK-T7DDX</td></tr><tr><td>Excel 2010</td><td>H62QG-HXVKF-PP4HP-66KMR-CW9BM</td></tr><tr><td>SharePoint Workspace 2010</td><td>QYYW6-QP4CB-MBV6G-HYMCJ-4T3J4</td></tr><tr><td>InfoPath 2010</td><td>K96W8-67RPQ-62T9Y-J8FQJ-BT37T</td></tr><tr><td>OneNote 2010</td><td>Q4Y4M-RHWJM-PY37F-MTKWH-D3XHX</td></tr><tr><td>Outlook 2010</td><td>7YDC2-CWM8M-RRTJC-8MDVC-X3DWQ</td></tr><tr><td>PowerPoint 2010</td><td>RC8FX-88JRY-3PF7C-X8P67-P4VTT</td></tr><tr><td>Project Professional 2010</td><td>YGX6F-PGV49-PGW3J-9BTGG-VHKC6</td></tr><tr><td>Project Standard 2010</td><td>4HP3K-88W3F-W2K3D-6677X-F9PGB</td></tr><tr><td>Publisher 2010</td><td>BFK7F-9MYHM-V68C7-DRQ66-83YTP</td></tr><tr><td>Word 2010</td><td>HVHB3-C6FV7-KQX9W-YQG79-CRY7T</td></tr><tr><td>Visio Standard 2010</td><td>767HD-QGMWX-8QTDB-9G3R2-KHFGJ</td></tr><tr><td>Visio Professional 2010</td><td>7MCW8-VRQVK-G677T-PDJCM-Q8TCP</td></tr><tr><td>Visio Premium 2010</td><td>D9DWC-HPYVV-JGF4P-BTWQB-WX8BJ</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;今天同学问我要office的注册码，我说我家都是在路由器上安装的KMS激活服务器。为了给同学们用，我准备在我的VPS上搭建KMS服务器。&lt;/p&gt;
&lt;h1 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h1&gt;&lt;p&gt;基于&lt;a href=&quot;https://github.com/Wind4/vlmcsd&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;vlmcsd&lt;/a&gt;搭建的KMS服务器。&lt;br&gt;根据github上的说明，这个工具是用C写的，没有任何依赖，可以直接运行。而且它横跨几乎现在所有的系统平台，如Android, FreeBSD, Solaris, Minix, Mac OS, iOS, Windows。相比于另一款工具&lt;a href=&quot;https://github.com/myanaloglife/py-kms&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;py-kms&lt;/a&gt;需要依赖pyhont2或者python3，可谓是非常干净舒爽。&lt;/p&gt;
    
    </summary>
    
      <category term="贪玩" scheme="http://yoursite.com/categories/%E8%B4%AA%E7%8E%A9/"/>
    
    
      <category term="KMS" scheme="http://yoursite.com/tags/KMS/"/>
    
      <category term="vlmcsd" scheme="http://yoursite.com/tags/vlmcsd/"/>
    
      <category term="ubuntu" scheme="http://yoursite.com/tags/ubuntu/"/>
    
      <category term="激活" scheme="http://yoursite.com/tags/%E6%BF%80%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>sequelize的基本操作</title>
    <link href="http://yoursite.com/posts/21f4d5f9/"/>
    <id>http://yoursite.com/posts/21f4d5f9/</id>
    <published>2019-07-04T04:51:51.000Z</published>
    <updated>2019-12-18T15:28:18.263Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍了sequelize的CURD操作</p><a id="more"></a><h1 id="查"><a href="#查" class="headerlink" title="查"></a>查</h1><h2 id="find"><a href="#find" class="headerlink" title="find"></a>find</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// search for known ids</span></span><br><span class="line">Project.findByPk(<span class="number">123</span>).then(<span class="function"><span class="params">project</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// project will be an instance of Project and stores the content of the table entry</span></span><br><span class="line">  <span class="comment">// with id 123. if such an entry is not defined you will get null</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// search for attributes</span></span><br><span class="line">Project.findOne(&#123; <span class="attr">where</span>: &#123;<span class="attr">title</span>: <span class="string">'aProject'</span>&#125; &#125;).then(<span class="function"><span class="params">project</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// project will be the first entry of the Projects table with the title 'aProject' || null</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Project.findOne(&#123;</span><br><span class="line">  where: &#123;<span class="attr">title</span>: <span class="string">'aProject'</span>&#125;,</span><br><span class="line">  attributes: [<span class="string">'id'</span>, [<span class="string">'name'</span>, <span class="string">'title'</span>]]</span><br><span class="line">&#125;).then(<span class="function"><span class="params">project</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// project will be the first entry of the Projects table with the title 'aProject' || null</span></span><br><span class="line">  <span class="comment">// project.get('title') will contain the name of the project</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="findOrCteate"><a href="#findOrCteate" class="headerlink" title="findOrCteate"></a>findOrCteate</h2><p>有则查，无则创建</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">User</span><br><span class="line">  .findOrCreate(&#123;<span class="attr">where</span>: &#123;<span class="attr">username</span>: <span class="string">'sdepold'</span>&#125;, <span class="attr">defaults</span>: &#123;<span class="attr">job</span>: <span class="string">'Technical Lead JavaScript'</span>&#125;&#125;)</span><br><span class="line">  .then(<span class="function">(<span class="params">[user, created]</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(user.get(&#123;</span><br><span class="line">      plain: <span class="literal">true</span></span><br><span class="line">    &#125;))</span><br><span class="line">    <span class="built_in">console</span>.log(created)</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     findOrCreate returns an array containing the object that was found or created and a boolean that</span></span><br><span class="line"><span class="comment">     will be true if a new object was created and false if not, like so:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    [ &#123;</span></span><br><span class="line"><span class="comment">        username: 'sdepold',</span></span><br><span class="line"><span class="comment">        job: 'Technical Lead JavaScript',</span></span><br><span class="line"><span class="comment">        id: 1,</span></span><br><span class="line"><span class="comment">        createdAt: Fri Mar 22 2013 21: 28: 34 GMT + 0100(CET),</span></span><br><span class="line"><span class="comment">        updatedAt: Fri Mar 22 2013 21: 28: 34 GMT + 0100(CET)</span></span><br><span class="line"><span class="comment">      &#125;,</span></span><br><span class="line"><span class="comment">      true ]</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> In the example above, the array spread on line 3 divides the array into its 2 parts and passes them</span></span><br><span class="line"><span class="comment">  as arguments to the callback function defined beginning at line 39, which treats them as "user" and</span></span><br><span class="line"><span class="comment">  "created" in this case. (So "user" will be the object from index 0 of the returned array and</span></span><br><span class="line"><span class="comment">  "created" will equal "true".)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><h2 id="findAndCountAll"><a href="#findAndCountAll" class="headerlink" title="findAndCountAll"></a>findAndCountAll</h2><p>合并了findAll和count。当需要处理<code>limit</code>和<code>offset</code>并且需要计算总数时可以用它</p><p>返回带有两个属性的对象：</p><ul><li><code>count</code> - 整型，总数。</li><li><code>rows</code> - 数组，记录。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Project</span><br><span class="line">  .findAndCountAll(&#123;</span><br><span class="line">     where: &#123;</span><br><span class="line">        title: &#123;</span><br><span class="line">          [Op.like]: <span class="string">'foo%'</span></span><br><span class="line">        &#125;</span><br><span class="line">     &#125;,</span><br><span class="line">     offset: <span class="number">10</span>,</span><br><span class="line">     limit: <span class="number">2</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(result.count);</span><br><span class="line">    <span class="built_in">console</span>.log(result.rows);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>支持includes。只有标记成required的才会统计到count。</p><p>假设你想查找所有有profile的user：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">User.findAndCountAll(&#123;</span><br><span class="line">  include: [</span><br><span class="line">     &#123; <span class="attr">model</span>: Profile, <span class="attr">required</span>: <span class="literal">true</span>&#125;</span><br><span class="line">  ],</span><br><span class="line">  limit: <span class="number">3</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>因为 <code>Profile</code> 设置成了 <code>required</code> ，所以返回inner join，并且只有拥有profile的users才会统计到count。如果我们移除 <code>required</code> ，无论有没有profile，所有的users都将被计算入总数。include中添加 <code>where</code> 条件自动设置成require:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">User.findAndCountAll(&#123;</span><br><span class="line">  include: [</span><br><span class="line">     &#123; <span class="attr">model</span>: Profile, <span class="attr">where</span>: &#123; <span class="attr">active</span>: <span class="literal">true</span> &#125;&#125;</span><br><span class="line">  ],</span><br><span class="line">  limit: <span class="number">3</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>上面的查询将值计算拥有active profile的user，因为当加入where条件时， <code>required</code> 被隐式的设置成了true。</p><p>传入 <code>findAndCountAll</code>的选项和下面的 <code>findAll</code> 相同。</p><h2 id="findAll"><a href="#findAll" class="headerlink" title="findAll"></a>findAll</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// find multiple entries</span></span><br><span class="line">Project.findAll().then(<span class="function"><span class="params">projects</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// projects will be an array of all Project instances</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// search for specific attributes - hash usage</span></span><br><span class="line">Project.findAll(&#123; <span class="attr">where</span>: &#123; <span class="attr">name</span>: <span class="string">'A Project'</span> &#125; &#125;).then(<span class="function"><span class="params">projects</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// projects will be an array of Project instances with the specified name</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// search within a specific range</span></span><br><span class="line">Project.findAll(&#123; <span class="attr">where</span>: &#123; <span class="attr">id</span>: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] &#125; &#125;).then(<span class="function"><span class="params">projects</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// projects will be an array of Projects having the id 1, 2 or 3</span></span><br><span class="line">  <span class="comment">// this is actually doing an IN query</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">Project.findAll(&#123;</span><br><span class="line">  where: &#123;</span><br><span class="line">    id: &#123;</span><br><span class="line">      [Op.and]: &#123;<span class="attr">a</span>: <span class="number">5</span>&#125;,           <span class="comment">// AND (a = 5)</span></span><br><span class="line">      [Op.or]: [&#123;<span class="attr">a</span>: <span class="number">5</span>&#125;, &#123;<span class="attr">a</span>: <span class="number">6</span>&#125;],  <span class="comment">// (a = 5 OR a = 6)</span></span><br><span class="line">      [Op.gt]: <span class="number">6</span>,                <span class="comment">// id &gt; 6</span></span><br><span class="line">      [Op.gte]: <span class="number">6</span>,               <span class="comment">// id &gt;= 6</span></span><br><span class="line">      [Op.lt]: <span class="number">10</span>,               <span class="comment">// id &lt; 10</span></span><br><span class="line">      [Op.lte]: <span class="number">10</span>,              <span class="comment">// id &lt;= 10</span></span><br><span class="line">      [Op.ne]: <span class="number">20</span>,               <span class="comment">// id != 20</span></span><br><span class="line">      [Op.between]: [<span class="number">6</span>, <span class="number">10</span>],     <span class="comment">// BETWEEN 6 AND 10</span></span><br><span class="line">      [Op.notBetween]: [<span class="number">11</span>, <span class="number">15</span>], <span class="comment">// NOT BETWEEN 11 AND 15</span></span><br><span class="line">      [Op.in]: [<span class="number">1</span>, <span class="number">2</span>],           <span class="comment">// IN [1, 2]</span></span><br><span class="line">      [Op.notIn]: [<span class="number">1</span>, <span class="number">2</span>],        <span class="comment">// NOT IN [1, 2]</span></span><br><span class="line">      [Op.like]: <span class="string">'%hat'</span>,         <span class="comment">// LIKE '%hat'</span></span><br><span class="line">      [Op.notLike]: <span class="string">'%hat'</span>,       <span class="comment">// NOT LIKE '%hat'</span></span><br><span class="line">      [Op.iLike]: <span class="string">'%hat'</span>,         <span class="comment">// ILIKE '%hat' (case insensitive)  (PG only)</span></span><br><span class="line">      [Op.notILike]: <span class="string">'%hat'</span>,      <span class="comment">// NOT ILIKE '%hat'  (PG only)</span></span><br><span class="line">      [Op.overlap]: [<span class="number">1</span>, <span class="number">2</span>],       <span class="comment">// &amp;&amp; [1, 2] (PG array overlap operator)</span></span><br><span class="line">      [Op.contains]: [<span class="number">1</span>, <span class="number">2</span>],      <span class="comment">// @&gt; [1, 2] (PG array contains operator)</span></span><br><span class="line">      [Op.contained]: [<span class="number">1</span>, <span class="number">2</span>],     <span class="comment">// &lt;@ [1, 2] (PG array contained by operator)</span></span><br><span class="line">      [Op.any]: [<span class="number">2</span>,<span class="number">3</span>]            <span class="comment">// ANY ARRAY[2, 3]::INTEGER (PG only)</span></span><br><span class="line">    &#125;,</span><br><span class="line">    status: &#123;</span><br><span class="line">      [Op.not]: <span class="literal">false</span>           <span class="comment">// status NOT FALSE</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="复杂过滤条件"><a href="#复杂过滤条件" class="headerlink" title="复杂过滤条件"></a>复杂过滤条件</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Project.findOne(&#123;</span><br><span class="line">  where: &#123;</span><br><span class="line">    name: <span class="string">'a project'</span>,</span><br><span class="line">    [Op.or]: [</span><br><span class="line">      &#123; <span class="attr">id</span>: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] &#125;,</span><br><span class="line">      &#123; <span class="attr">id</span>: &#123; [Op.gt]: <span class="number">10</span> &#125; &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">Project.findOne(&#123;</span><br><span class="line">  where: &#123;</span><br><span class="line">    name: <span class="string">'a project'</span>,</span><br><span class="line">    id: &#123;</span><br><span class="line">      [Op.or]: [</span><br><span class="line">        [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],</span><br><span class="line">        &#123; [Op.gt]: <span class="number">10</span> &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>等价sql:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> <span class="string">`Projects`</span></span><br><span class="line"><span class="keyword">WHERE</span> (</span><br><span class="line">  <span class="string">`Projects`</span>.<span class="string">`name`</span> = <span class="string">'a project'</span></span><br><span class="line">   <span class="keyword">AND</span> (<span class="string">`Projects`</span>.<span class="string">`id`</span> <span class="keyword">IN</span> (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>) <span class="keyword">OR</span> <span class="string">`Projects`</span>.<span class="string">`id`</span> &gt; <span class="number">10</span>)</span><br><span class="line">)</span><br><span class="line"><span class="keyword">LIMIT</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p><code>not</code> 例子:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Project.findOne(&#123;</span><br><span class="line">  where: &#123;</span><br><span class="line">    name: <span class="string">'a project'</span>,</span><br><span class="line">    [Op.not]: [</span><br><span class="line">      &#123; <span class="attr">id</span>: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] &#125;,</span><br><span class="line">      &#123; <span class="attr">array</span>: &#123; [Op.contains]: [<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>] &#125; &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>等价sql:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> <span class="string">`Projects`</span></span><br><span class="line"><span class="keyword">WHERE</span> (</span><br><span class="line">  <span class="string">`Projects`</span>.<span class="string">`name`</span> = <span class="string">'a project'</span></span><br><span class="line">   <span class="keyword">AND</span> <span class="keyword">NOT</span> (<span class="string">`Projects`</span>.<span class="string">`id`</span> <span class="keyword">IN</span> (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>) <span class="keyword">OR</span> <span class="string">`Projects`</span>.<span class="string">`array`</span> @&gt; <span class="built_in">ARRAY</span>[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]::<span class="built_in">INTEGER</span>[])</span><br><span class="line">)</span><br><span class="line"><span class="keyword">LIMIT</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><h2 id="limit，offset，order-和-group"><a href="#limit，offset，order-和-group" class="headerlink" title="limit，offset，order 和 group"></a>limit，offset，order 和 group</h2><p>你可以使用limit, offset:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// limit the results of the query</span></span><br><span class="line">Project.findAll(&#123; <span class="attr">limit</span>: <span class="number">10</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// step over the first 10 elements</span></span><br><span class="line">Project.findAll(&#123; <span class="attr">offset</span>: <span class="number">10</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// step over the first 10 elements, and take 2</span></span><br><span class="line">Project.findAll(&#123; <span class="attr">offset</span>: <span class="number">10</span>, <span class="attr">limit</span>: <span class="number">2</span> &#125;)</span><br></pre></td></tr></table></figure><p>group和order，他们语法相同：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Project.findAll(&#123;<span class="attr">order</span>: [[<span class="string">'title'</span>, <span class="string">'DESC'</span>]]&#125;)</span><br><span class="line"><span class="comment">// yields ORDER BY title DESC</span></span><br><span class="line"></span><br><span class="line">Project.findAll(&#123;<span class="attr">group</span>: <span class="string">'name'</span>&#125;)</span><br><span class="line"><span class="comment">// yields GROUP BY name</span></span><br></pre></td></tr></table></figure><p>注意上面两个例子，字符串会一字不差的传入到查询语句中而不经过转义，比如列名不会转义。当你传入一个字符串到order/group时，一直会这样处理。如果想转义列名，需要提供一个参数数组，即使你只想order/group一列。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">something.findOne(&#123;</span><br><span class="line">  order: [</span><br><span class="line">    <span class="comment">// will return `name`</span></span><br><span class="line">    [<span class="string">'name'</span>],</span><br><span class="line">    <span class="comment">// will return `username` DESC</span></span><br><span class="line">    [<span class="string">'username'</span>, <span class="string">'DESC'</span>],</span><br><span class="line">    <span class="comment">// will return max(`age`)</span></span><br><span class="line">    sequelize.fn(<span class="string">'max'</span>, sequelize.col(<span class="string">'age'</span>)),</span><br><span class="line">    <span class="comment">// will return max(`age`) DESC</span></span><br><span class="line">    [sequelize.fn(<span class="string">'max'</span>, sequelize.col(<span class="string">'age'</span>)), <span class="string">'DESC'</span>],</span><br><span class="line">    <span class="comment">// will return otherfunction(`col1`, 12, 'lalala') DESC</span></span><br><span class="line">    [sequelize.fn(<span class="string">'otherfunction'</span>, sequelize.col(<span class="string">'col1'</span>), <span class="number">12</span>, <span class="string">'lalala'</span>), <span class="string">'DESC'</span>],</span><br><span class="line">    <span class="comment">// will return otherfunction(awesomefunction(`col`)) DESC, This nesting is potentially infinite!</span></span><br><span class="line">    [sequelize.fn(<span class="string">'otherfunction'</span>, sequelize.fn(<span class="string">'awesomefunction'</span>, sequelize.col(<span class="string">'col'</span>))), <span class="string">'DESC'</span>]</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>总结：order/group数组元素可以是：</p><ul><li>String - 直接引用</li><li>Array - 第一个元素直接引用，第二个逐字追加</li><li>Object -<ul><li>raw逐字追加，而不作为字符串</li><li>如果raw未设置，其他的会被忽略，query失败</li></ul></li><li>Sequelize.fn 和 Sequelize.col 返回functions和引用的列名</li></ul><h2 id="只获取原始数据"><a href="#只获取原始数据" class="headerlink" title="只获取原始数据"></a>只获取原始数据</h2><p>Sequelize返回的是带有update、delete等方法的model实例，如果有几千条数据，可能会比较耗时。如果只是需要展示数据而不需要更新等其他操作，可以使用如下方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Are you expecting a massive dataset from the DB,</span></span><br><span class="line"><span class="comment">// and don't want to spend the time building DAOs for each entry?</span></span><br><span class="line"><span class="comment">// You can pass an extra query option to get the raw data instead:</span></span><br><span class="line">Project.findAll(&#123; <span class="attr">where</span>: &#123; ... &#125;, <span class="attr">raw</span>: <span class="literal">true</span> &#125;)</span><br></pre></td></tr></table></figure><h2 id="function"><a href="#function" class="headerlink" title="function"></a>function</h2><h3 id="count"><a href="#count" class="headerlink" title="count"></a>count</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Project.count().then(<span class="function"><span class="params">c</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"There are "</span> + c + <span class="string">" projects!"</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">Project.count(&#123; <span class="attr">where</span>: &#123;<span class="string">'id'</span>: &#123;[Op.gt]: <span class="number">25</span>&#125;&#125; &#125;).then(<span class="function"><span class="params">c</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"There are "</span> + c + <span class="string">" projects with an id greater than 25."</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="max"><a href="#max" class="headerlink" title="max"></a>max</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  Let's assume 3 person objects with an attribute age.</span></span><br><span class="line"><span class="comment">  The first one is 10 years old,</span></span><br><span class="line"><span class="comment">  the second one is 5 years old,</span></span><br><span class="line"><span class="comment">  the third one is 40 years old.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">Project.max(<span class="string">'age'</span>).then(<span class="function"><span class="params">max</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// this will return 40</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">Project.max(<span class="string">'age'</span>, &#123; <span class="attr">where</span>: &#123; <span class="attr">age</span>: &#123; [Op.lt]: <span class="number">20</span> &#125; &#125; &#125;).then(<span class="function"><span class="params">max</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// will be 10</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="min"><a href="#min" class="headerlink" title="min"></a>min</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  Let's assume 3 person objects with an attribute age.</span></span><br><span class="line"><span class="comment">  The first one is 10 years old,</span></span><br><span class="line"><span class="comment">  the second one is 5 years old,</span></span><br><span class="line"><span class="comment">  the third one is 40 years old.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">Project.min(<span class="string">'age'</span>).then(<span class="function"><span class="params">min</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// this will return 5</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">Project.min(<span class="string">'age'</span>, &#123; <span class="attr">where</span>: &#123; <span class="attr">age</span>: &#123; [Op.gt]: <span class="number">5</span> &#125; &#125; &#125;).then(<span class="function"><span class="params">min</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// will be 10</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="sum"><a href="#sum" class="headerlink" title="sum"></a>sum</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  Let's assume 3 person objects with an attribute age.</span></span><br><span class="line"><span class="comment">  The first one is 10 years old,</span></span><br><span class="line"><span class="comment">  the second one is 5 years old,</span></span><br><span class="line"><span class="comment">  the third one is 40 years old.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">Project.sum(<span class="string">'age'</span>).then(<span class="function"><span class="params">sum</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// this will return 55</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">Project.sum(<span class="string">'age'</span>, &#123; <span class="attr">where</span>: &#123; <span class="attr">age</span>: &#123; [Op.gt]: <span class="number">5</span> &#125; &#125; &#125;).then(<span class="function"><span class="params">sum</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// will be 50</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="只获取需要的列"><a href="#只获取需要的列" class="headerlink" title="只获取需要的列"></a>只获取需要的列</h2><p><code>attributes</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Model.findAll(&#123;</span><br><span class="line">  attributes: [<span class="string">'foo'</span>, <span class="string">'bar'</span>]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> foo, bar ...</span><br></pre></td></tr></table></figure><p>别名</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Model.findAll(&#123;</span><br><span class="line">  attributes: [<span class="string">'foo'</span>, [<span class="string">'bar'</span>, <span class="string">'baz'</span>]]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> foo, bar <span class="keyword">AS</span> baz ...</span><br></pre></td></tr></table></figure><p>使用函数作为列：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Model.findAll(&#123;</span><br><span class="line">  attributes: [[sequelize.fn(<span class="string">'COUNT'</span>, sequelize.col(<span class="string">'hats'</span>)), <span class="string">'no_hats'</span>]]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(hats) <span class="keyword">AS</span> no_hats ...</span><br></pre></td></tr></table></figure><p>当使用函数时，必须指定别名用来访问。如上方的例子，可以使用<code>instance.get(&#39;no_hats&#39;)</code>来获取帽子的数量。</p><p>如果需要所有的列，然后再加上一个函数的话，全写出来会很麻烦。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Model.findAll(&#123;</span><br><span class="line">  attributes: [<span class="string">'id'</span>, <span class="string">'foo'</span>, <span class="string">'bar'</span>, <span class="string">'baz'</span>, <span class="string">'quz'</span>, [sequelize.fn(<span class="string">'COUNT'</span>, sequelize.col(<span class="string">'hats'</span>)), <span class="string">'no_hats'</span>]]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这时可以这样：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// This is shorter, and less error prone because it still works if you add / remove attributes</span></span><br><span class="line">Model.findAll(&#123;</span><br><span class="line">  attributes: &#123; <span class="attr">include</span>: [[sequelize.fn(<span class="string">'COUNT'</span>, sequelize.col(<span class="string">'hats'</span>)), <span class="string">'no_hats'</span>]] &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>他们的sql都是：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span>, foo, bar, baz, quz, <span class="keyword">COUNT</span>(hats) <span class="keyword">AS</span> no_hats ...</span><br></pre></td></tr></table></figure><p>如果只想去除一列：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Model.findAll(&#123;</span><br><span class="line">  attributes: &#123; <span class="attr">exclude</span>: [<span class="string">'baz'</span>] &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span>, foo, bar, quz ...</span><br></pre></td></tr></table></figure><h1 id="where-条件"><a href="#where-条件" class="headerlink" title="where 条件"></a>where 条件</h1><p>findAll/find 或者批量 updates/destroys ，可以使用where过滤。where</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍了sequelize的CURD操作&lt;/p&gt;
    
    </summary>
    
      <category term="Nodejs" scheme="http://yoursite.com/categories/Nodejs/"/>
    
    
      <category term="sequelize" scheme="http://yoursite.com/tags/sequelize/"/>
    
      <category term="数据库" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="ORM" scheme="http://yoursite.com/tags/ORM/"/>
    
      <category term="Nodejs" scheme="http://yoursite.com/tags/Nodejs/"/>
    
  </entry>
  
  <entry>
    <title>sequelize中model的配置:model definition</title>
    <link href="http://yoursite.com/posts/ba6cea6e/"/>
    <id>http://yoursite.com/posts/ba6cea6e/</id>
    <published>2019-07-03T15:13:01.000Z</published>
    <updated>2019-12-18T15:28:18.263Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍model的options选项</p><a id="more"></a><h1 id="model的一个例子"><a href="#model的一个例子" class="headerlink" title="model的一个例子"></a>model的一个例子</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> <span class="keyword">extends</span> <span class="title">Model</span> </span>&#123;&#125;</span><br><span class="line">Foo.init(&#123;</span><br><span class="line"> <span class="comment">// 不许为空，默认值为true</span></span><br><span class="line"> flag: &#123; <span class="attr">type</span>: Sequelize.BOOLEAN, <span class="attr">allowNull</span>: <span class="literal">false</span>, <span class="attr">defaultValue</span>: <span class="literal">true</span> &#125;,</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 默认值为当前时间</span></span><br><span class="line"> myDate: &#123; <span class="attr">type</span>: Sequelize.DATE, <span class="attr">defaultValue</span>: Sequelize.NOW &#125;,</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 设置成不许为空，执行插入操作的时候如果是值null，DB将会抛出异常。</span></span><br><span class="line"> <span class="comment">// 如果想在插入操作前检查是否为空，参照下面的验证一节</span></span><br><span class="line"> title: &#123; <span class="attr">type</span>: Sequelize.STRING, <span class="attr">allowNull</span>: <span class="literal">false</span> &#125;,</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 创建两个相同的值将抛出错误。唯一属性可以是boolean类型或字符串。</span></span><br><span class="line"> <span class="comment">// 如果在多个字段提供了相同的字符串，将创建一个复合唯一键。</span></span><br><span class="line"> uniqueOne: &#123; <span class="attr">type</span>: Sequelize.STRING,  <span class="attr">unique</span>: <span class="string">'compositeIndex'</span> &#125;,</span><br><span class="line"> uniqueTwo: &#123; <span class="attr">type</span>: Sequelize.INTEGER, <span class="attr">unique</span>: <span class="string">'compositeIndex'</span> &#125;,</span><br><span class="line"></span><br><span class="line"> <span class="comment">// unique属性可以简单快速的创建一个唯一约束</span></span><br><span class="line"> someUnique: &#123; <span class="attr">type</span>: Sequelize.STRING, <span class="attr">unique</span>: <span class="literal">true</span> &#125;,</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 下面的方法跟直接创建是一样的</span></span><br><span class="line"> &#123; <span class="attr">someUnique</span>: &#123; <span class="attr">type</span>: Sequelize.STRING &#125; &#125;,</span><br><span class="line"> &#123; <span class="attr">indexes</span>: [ &#123; <span class="attr">unique</span>: <span class="literal">true</span>, <span class="attr">fields</span>: [ <span class="string">'someUnique'</span> ] &#125; ] &#125;,</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 主键</span></span><br><span class="line"> identifier: &#123; <span class="attr">type</span>: Sequelize.STRING, <span class="attr">primaryKey</span>: <span class="literal">true</span> &#125;,</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 自增</span></span><br><span class="line"> incrementMe: &#123; <span class="attr">type</span>: Sequelize.INTEGER, <span class="attr">autoIncrement</span>: <span class="literal">true</span> &#125;,</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 通过field属性指定DB中的列</span></span><br><span class="line"> fieldWithUnderscores: &#123; <span class="attr">type</span>: Sequelize.STRING, <span class="attr">field</span>: <span class="string">'field_with_underscores'</span> &#125;,</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 创建外键</span></span><br><span class="line"> bar_id: &#123;</span><br><span class="line">   type: Sequelize.INTEGER,</span><br><span class="line"></span><br><span class="line">   references: &#123;</span><br><span class="line">     <span class="comment">// 另一个model的引用</span></span><br><span class="line">     model: Bar,</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 另一个model引用的列名</span></span><br><span class="line">     key: <span class="string">'id'</span>,</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 指定何时检查外键约束 PostgreSQL only.</span></span><br><span class="line">     deferrable: Sequelize.Deferrable.INITIALLY_IMMEDIATE</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;,</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 加列注释 for MySQL, PostgreSQL and MSSQL only</span></span><br><span class="line"> commentMe: &#123;</span><br><span class="line">   type: Sequelize.INTEGER,</span><br><span class="line"></span><br><span class="line">   comment: <span class="string">'This is a column name that has a comment'</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;, &#123;</span><br><span class="line">  sequelize,</span><br><span class="line">  modelName: <span class="string">'foo'</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="时间戳（timestamps）"><a href="#时间戳（timestamps）" class="headerlink" title="时间戳（timestamps）"></a>时间戳（timestamps）</h1><p>默认情况下自动创建<code>createdAt</code>和<code>updatedAt</code></p><p>详见下面的配置。</p><h1 id="Getter-amp-Setter"><a href="#Getter-amp-Setter" class="headerlink" title="Getter &amp; Setter"></a>Getter &amp; Setter</h1><p>可以有两种方法定义<code>getter</code>&amp;<code>setter</code>:</p><ul><li>属性的定义中</li><li>model的options中</li></ul><p><strong>如果两个地方都定义了，则属性中的优先</strong></p><h2 id="属性定义："><a href="#属性定义：" class="headerlink" title="属性定义："></a>属性定义：</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span> <span class="keyword">extends</span> <span class="title">Model</span> </span>&#123;&#125;</span><br><span class="line">Employee.init(&#123;</span><br><span class="line">  name: &#123;</span><br><span class="line">    type: Sequelize.STRING,</span><br><span class="line">    allowNull: <span class="literal">false</span>,</span><br><span class="line">    <span class="keyword">get</span>() &#123;</span><br><span class="line">      <span class="keyword">const</span> title = <span class="keyword">this</span>.getDataValue(<span class="string">'title'</span>);</span><br><span class="line">      <span class="comment">// 'this' allows you to access attributes of the instance</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.getDataValue(<span class="string">'name'</span>) + <span class="string">' ('</span> + title + <span class="string">')'</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  title: &#123;</span><br><span class="line">    type: Sequelize.STRING,</span><br><span class="line">    allowNull: <span class="literal">false</span>,</span><br><span class="line">    <span class="keyword">set</span>(val) &#123;</span><br><span class="line">      <span class="keyword">this</span>.setDataValue(<span class="string">'title'</span>, val.toUpperCase());</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, &#123; sequelize, <span class="attr">modelName</span>: <span class="string">'employee'</span> &#125;);</span><br><span class="line"></span><br><span class="line">Employee</span><br><span class="line">  .create(&#123; <span class="attr">name</span>: <span class="string">'John Doe'</span>, <span class="attr">title</span>: <span class="string">'senior engineer'</span> &#125;)</span><br><span class="line">  .then(<span class="function"><span class="params">employee</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(employee.get(<span class="string">'name'</span>)); <span class="comment">// John Doe (SENIOR ENGINEER)</span></span><br><span class="line">    <span class="built_in">console</span>.log(employee.get(<span class="string">'title'</span>)); <span class="comment">// SENIOR ENGINEER</span></span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><h2 id="model的options中定义："><a href="#model的options中定义：" class="headerlink" title="model的options中定义："></a>model的options中定义：</h2><p>下面是在model的options中定义<code>getter</code>&amp;<code>setter</code>的例子</p><p><code>fullName</code> getter是一个你如何定义数据库中并不存在的列的虚假属性（pseudo properties）的例子。事实上，虚假属性可以在两个地方定义：model getters和virtual datatype。virtual datatype可以有验证，而虚拟属性不行。注意在<code>fullName</code>的getter方法中引用的<code>this.firstname</code>和 <code>this.lastname</code>将会触发各自的getter方法。如果你不想触发，可以使用<code>getDataValue()</code>方法来获取原始值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> <span class="keyword">extends</span> <span class="title">Model</span> </span>&#123;</span><br><span class="line">  <span class="keyword">get</span> fullName() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.firstname + <span class="string">' '</span> + <span class="keyword">this</span>.lastname;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">set</span> fullName(value) &#123;</span><br><span class="line">    <span class="keyword">const</span> names = value.split(<span class="string">' '</span>);</span><br><span class="line">    <span class="keyword">this</span>.setDataValue(<span class="string">'firstname'</span>, names.slice(<span class="number">0</span>, <span class="number">-1</span>).join(<span class="string">' '</span>));</span><br><span class="line">    <span class="keyword">this</span>.setDataValue(<span class="string">'lastname'</span>, names.slice(<span class="number">-1</span>).join(<span class="string">' '</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">Foo.init(&#123;</span><br><span class="line">  firstname: Sequelize.STRING,</span><br><span class="line">  lastname: Sequelize.STRING</span><br><span class="line">&#125;, &#123;</span><br><span class="line">  sequelize,</span><br><span class="line">  modelName: <span class="string">'foo'</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Or with `sequelize.define`</span></span><br><span class="line">sequelize.define(<span class="string">'Foo'</span>, &#123;</span><br><span class="line">  firstname: Sequelize.STRING,</span><br><span class="line">  lastname: Sequelize.STRING</span><br><span class="line">&#125;, &#123;</span><br><span class="line">  getterMethods: &#123;</span><br><span class="line">    fullName() &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.firstname + <span class="string">' '</span> + <span class="keyword">this</span>.lastname;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  setterMethods: &#123;</span><br><span class="line">    fullName(value) &#123;</span><br><span class="line">      <span class="keyword">const</span> names = value.split(<span class="string">' '</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">this</span>.setDataValue(<span class="string">'firstname'</span>, names.slice(<span class="number">0</span>, <span class="number">-1</span>).join(<span class="string">' '</span>));</span><br><span class="line">      <span class="keyword">this</span>.setDataValue(<span class="string">'lastname'</span>, names.slice(<span class="number">-1</span>).join(<span class="string">' '</span>));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="验证（validation）"><a href="#验证（validation）" class="headerlink" title="验证（validation）"></a>验证（validation）</h1><p>Model validations允许为每一个attribute指定格式/内容/继承验证。</p><p>Validations会在 <code>create</code>, <code>update</code> 和 <code>save</code>时自动触发，也可以在一个实例里手动调用<code>validate()</code>触发</p><h2 id="属性验证器"><a href="#属性验证器" class="headerlink" title="属性验证器"></a>属性验证器</h2><p>可以自定义验证器或者使用<a href="https://github.com/chriso/validator.js" target="_blank" rel="noopener">validator.js</a>内建的一些验证器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ValidateMe</span> <span class="keyword">extends</span> <span class="title">Model</span> </span>&#123;&#125;</span><br><span class="line">ValidateMe.init(&#123;</span><br><span class="line">  bar: &#123;</span><br><span class="line">    type: Sequelize.STRING,</span><br><span class="line">    validate: &#123;</span><br><span class="line">      is: [<span class="string">"^[a-z]+$"</span>,<span class="string">'i'</span>],     <span class="comment">// will only allow letters</span></span><br><span class="line">      is: <span class="regexp">/^[a-z]+$/i</span>,          <span class="comment">// same as the previous example using real RegExp</span></span><br><span class="line">      not: [<span class="string">"[a-z]"</span>,<span class="string">'i'</span>],       <span class="comment">// will not allow letters</span></span><br><span class="line">      isEmail: <span class="literal">true</span>,            <span class="comment">// checks for email format (foo@bar.com)</span></span><br><span class="line">      isUrl: <span class="literal">true</span>,              <span class="comment">// checks for url format (http://foo.com)</span></span><br><span class="line">      isIP: <span class="literal">true</span>,               <span class="comment">// checks for IPv4 (129.89.23.1) or IPv6 format</span></span><br><span class="line">      isIPv4: <span class="literal">true</span>,             <span class="comment">// checks for IPv4 (129.89.23.1)</span></span><br><span class="line">      isIPv6: <span class="literal">true</span>,             <span class="comment">// checks for IPv6 format</span></span><br><span class="line">      isAlpha: <span class="literal">true</span>,            <span class="comment">// will only allow letters</span></span><br><span class="line">      isAlphanumeric: <span class="literal">true</span>,     <span class="comment">// will only allow alphanumeric characters, so "_abc" will fail</span></span><br><span class="line">      isNumeric: <span class="literal">true</span>,          <span class="comment">// will only allow numbers</span></span><br><span class="line">      isInt: <span class="literal">true</span>,              <span class="comment">// checks for valid integers</span></span><br><span class="line">      isFloat: <span class="literal">true</span>,            <span class="comment">// checks for valid floating point numbers</span></span><br><span class="line">      isDecimal: <span class="literal">true</span>,          <span class="comment">// checks for any numbers</span></span><br><span class="line">      isLowercase: <span class="literal">true</span>,        <span class="comment">// checks for lowercase</span></span><br><span class="line">      isUppercase: <span class="literal">true</span>,        <span class="comment">// checks for uppercase</span></span><br><span class="line">      notNull: <span class="literal">true</span>,            <span class="comment">// won't allow null</span></span><br><span class="line">      isNull: <span class="literal">true</span>,             <span class="comment">// only allows null</span></span><br><span class="line">      notEmpty: <span class="literal">true</span>,           <span class="comment">// don't allow empty strings</span></span><br><span class="line">      equals: <span class="string">'specific value'</span>, <span class="comment">// only allow a specific value</span></span><br><span class="line">      contains: <span class="string">'foo'</span>,          <span class="comment">// force specific substrings</span></span><br><span class="line">      notIn: [[<span class="string">'foo'</span>, <span class="string">'bar'</span>]],  <span class="comment">// check the value is not one of these</span></span><br><span class="line">      isIn: [[<span class="string">'foo'</span>, <span class="string">'bar'</span>]],   <span class="comment">// check the value is one of these</span></span><br><span class="line">      notContains: <span class="string">'bar'</span>,       <span class="comment">// don't allow specific substrings</span></span><br><span class="line">      len: [<span class="number">2</span>,<span class="number">10</span>],              <span class="comment">// only allow values with length between 2 and 10</span></span><br><span class="line">      isUUID: <span class="number">4</span>,                <span class="comment">// only allow uuids</span></span><br><span class="line">      isDate: <span class="literal">true</span>,             <span class="comment">// only allow date strings</span></span><br><span class="line">      isAfter: <span class="string">"2011-11-05"</span>,    <span class="comment">// only allow date strings after a specific date</span></span><br><span class="line">      isBefore: <span class="string">"2011-11-05"</span>,   <span class="comment">// only allow date strings before a specific date</span></span><br><span class="line">      max: <span class="number">23</span>,                  <span class="comment">// only allow values &lt;= 23</span></span><br><span class="line">      min: <span class="number">23</span>,                  <span class="comment">// only allow values &gt;= 23</span></span><br><span class="line">      isCreditCard: <span class="literal">true</span>,       <span class="comment">// check for valid credit card numbers</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// Examples of custom validators:</span></span><br><span class="line">      isEven(value) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">parseInt</span>(value) % <span class="number">2</span> !== <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Only even values are allowed!'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      isGreaterThanOtherField(value) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">parseInt</span>(value) &lt;= <span class="built_in">parseInt</span>(<span class="keyword">this</span>.otherField)) &#123;</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Bar must be greater than otherField.'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, &#123; sequelize &#125;);</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>验证函数有些地方需要传入多个参数，传入的参数必须是数组。但是如果要传入一个<code>数组参数</code>，例如 <code>isIn</code>， 将会被解释成多个字符串参数而不是一个数组参数。解决方法是传入一个单一长度的数组，就像上面例子中的 <code>[[&#39;one&#39;, &#39;two&#39;]]</code> 。</p><p>用自定义错误信息代替 <a href="https://github.com/chriso/validator.js" target="_blank" rel="noopener">validator.js</a>中提供的默认信息，需要使用一个对象而不是纯值或参数数组。例如不需要参数的验证器可以设置如下自定义信息：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">isInt: &#123;</span><br><span class="line">  msg: <span class="string">"Must be an integer number of pennies"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者如果需要参数，可以加上 <code>args</code> 属性：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">isIn: &#123;</span><br><span class="line">  args: [[<span class="string">'en'</span>, <span class="string">'zh'</span>]],</span><br><span class="line">  msg: <span class="string">"Must be English or Chinese"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当使用自定义验证器函数时，错误消息将是抛出的 <code>Error</code> 对象所持有的任何消息。</p><p>有关内置验证方法的更多详细信息，请参阅 <a href="https://github.com/chriso/validator.js" target="_blank" rel="noopener">validator.js project</a> .</p><p>*<em>提示: *</em>你还可以为日志记录部分定义自定义函数. 只是传递一个方法. 第一个参数将是记录的字符串.</p><h3 id="属性验证器-与-allowNull"><a href="#属性验证器-与-allowNull" class="headerlink" title="属性验证器 与 allowNull"></a>属性验证器 与 <code>allowNull</code></h3><p>如果模型的特定字段设置为不允许为空(使用<code>allowNull:false</code>)并且该值已经被设置为 <code>null</code>，则所有的验证器都将跳过并抛出 <code>ValidationError</code>异常。</p><p>另一方面，如果设置为允许为空(使用 <code>allowNull:true</code>)并且该值已经被设置为 <code>null</code>，则只会跳过内置验证器，而自定义验证器仍将执行。</p><p>这意味着可以使用一个字符串字段来验证其长度在5到10个字符之间，但也允许为 <code>null</code>(因为当值为 <code>null</code> 时，将自动跳过长度验证器):</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">Model</span> </span>&#123;&#125;</span><br><span class="line">User.init(&#123;</span><br><span class="line">  username: &#123;</span><br><span class="line">    type: Sequelize.STRING,</span><br><span class="line">    allowNull: <span class="literal">true</span>,</span><br><span class="line">    validate: &#123;</span><br><span class="line">      len: [<span class="number">5</span>, <span class="number">10</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, &#123; sequelize &#125;);</span><br></pre></td></tr></table></figure><p>你也能利用自定义验证器有条件的允许 <code>null</code> 值，因为它不会被跳过：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">Model</span> </span>&#123;&#125;</span><br><span class="line">User.init(&#123;</span><br><span class="line">  age: Sequelize.INTEGER,</span><br><span class="line">  name: &#123;</span><br><span class="line">    type: Sequelize.STRING,</span><br><span class="line">    allowNull: <span class="literal">true</span>,</span><br><span class="line">    validate: &#123;</span><br><span class="line">      customValidator(value) &#123;</span><br><span class="line">        <span class="keyword">if</span> (value === <span class="literal">null</span> &amp;&amp; <span class="keyword">this</span>.age !== <span class="number">10</span>) &#123;</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"name can't be null unless age is 10"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, &#123; sequelize &#125;);</span><br></pre></td></tr></table></figure><p>通过设置 <code>notNull</code> 验证器，你能自定义 <code>allowNull</code> 的错误信息：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">Model</span> </span>&#123;&#125;</span><br><span class="line">User.init(&#123;</span><br><span class="line">  name: &#123;</span><br><span class="line">    type: Sequelize.STRING,</span><br><span class="line">    allowNull: <span class="literal">false</span>,</span><br><span class="line">    validate: &#123;</span><br><span class="line">      notNull: &#123;</span><br><span class="line">        msg: <span class="string">'Please enter your name'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, &#123; sequelize &#125;);</span><br></pre></td></tr></table></figure><h3 id="模型范围验证"><a href="#模型范围验证" class="headerlink" title="模型范围验证"></a>模型范围验证</h3><p>验证器也可以在特定字段验证器之后用来定义检查模型。例如，你可以确保<code>纬度</code>和<code>经度</code>都不设置，或者两者都设置。如果设置了一个而另一个未设置则验证失败。</p><p>模型验证器方法与模型对象的上下文一起调用，如果它们抛出错误，则认为失败，否则认为通过。这与自定义字段特定的验证器是一样的。</p><p>所收集的任何错误消息都将与验证结果对象一起放在字段验证错误中。这个错误使用在<code>validate</code>参数对象中以失败的验证方法的键来命名。即便在任何一个时刻，每个模型验证方法只能有一个错误消息，它会在数组中显示为单个字符串错误。以最大化与字段错误的一致性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pub</span> <span class="keyword">extends</span> <span class="title">Model</span> </span>&#123;&#125;</span><br><span class="line">Pub.init(&#123;</span><br><span class="line">  name: &#123; <span class="attr">type</span>: Sequelize.STRING &#125;,</span><br><span class="line">  address: &#123; <span class="attr">type</span>: Sequelize.STRING &#125;,</span><br><span class="line">  latitude: &#123;</span><br><span class="line">    type: Sequelize.INTEGER,</span><br><span class="line">    allowNull: <span class="literal">true</span>,</span><br><span class="line">    defaultValue: <span class="literal">null</span>,</span><br><span class="line">    validate: &#123; <span class="attr">min</span>: <span class="number">-90</span>, <span class="attr">max</span>: <span class="number">90</span> &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  longitude: &#123;</span><br><span class="line">    type: Sequelize.INTEGER,</span><br><span class="line">    allowNull: <span class="literal">true</span>,</span><br><span class="line">    defaultValue: <span class="literal">null</span>,</span><br><span class="line">    validate: &#123; <span class="attr">min</span>: <span class="number">-180</span>, <span class="attr">max</span>: <span class="number">180</span> &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;, &#123;</span><br><span class="line">  validate: &#123;</span><br><span class="line">    bothCoordsOrNone() &#123;</span><br><span class="line">      <span class="keyword">if</span> ((<span class="keyword">this</span>.latitude === <span class="literal">null</span>) !== (<span class="keyword">this</span>.longitude === <span class="literal">null</span>)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Require either both latitude and longitude or neither'</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  sequelize,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在这种简单情况下，如果给定纬度或经度,而不是同时包含两者，则验证失败。 如果我们尝试构建一个超范围的纬度和经度，那么<code>raging_bullock_arms.validate()</code>可能会返回</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">'latitude'</span>: [<span class="string">'Invalid number: latitude'</span>],</span><br><span class="line">  <span class="string">'bothCoordsOrNone'</span>: [<span class="string">'Require either both latitude and longitude or neither'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样的验证也可以通过在单个属性上定义的自定义验证器(例如<code>latitude</code>属性，通过检查<code>(value === null) !== (this.longitude === null)</code>)来完成，但模型范围的验证方法更清晰.</p><h1 id="配置-configuration"><a href="#配置-configuration" class="headerlink" title="配置(configuration)"></a>配置(configuration)</h1><p>你可以通过Sequelize handles影响列名：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bar</span> <span class="keyword">extends</span> <span class="title">Model</span> </span>&#123;&#125;</span><br><span class="line">Bar.init(&#123; <span class="comment">/* bla */</span> &#125;, &#123;</span><br><span class="line">  <span class="comment">// model名. 在`sequelize.models`下面用这个名字存储此model</span></span><br><span class="line">  <span class="comment">// 默认类名，如在这个例子中是Bar。控制自动生成的外键和联合查询的名字</span></span><br><span class="line">  modelName: <span class="string">'bar'</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 不自动添加timestamp属性(updatedAt, createdAt)</span></span><br><span class="line">  timestamps: <span class="literal">false</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 不删除数据库记录，而是设置一个删除属性deletedAt到当前数据（当删除完毕时）</span></span><br><span class="line">  <span class="comment">// paranoid只有在timestamps启用时才起作用</span></span><br><span class="line">  paranoid: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 自动设置下划线.</span></span><br><span class="line">  <span class="comment">// 字段如果已经设置了则不会重写</span></span><br><span class="line">  underscored: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 不会自动在表名加上s</span></span><br><span class="line">  freezeTableName: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 定义数据库表名</span></span><br><span class="line">  tableName: <span class="string">'my_very_custom_table_name'</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 使用乐观锁.</span></span><br><span class="line">  <span class="comment">// 启用时，sequelize将增加一个version count属性到model上，</span></span><br><span class="line">  <span class="comment">// 并且当脏读保存时，会抛出OptimisticLockingError错误</span></span><br><span class="line">  <span class="comment">// 当你想启用时，设置成true或者一个属性名字符串。</span></span><br><span class="line">  version: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Sequelize实例</span></span><br><span class="line">  sequelize,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>当你想使用timestamps，但是只想使用一部分，或者使用另外的名字时：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> <span class="keyword">extends</span> <span class="title">Model</span> </span>&#123;&#125;</span><br><span class="line">Foo.init(&#123; <span class="comment">/* bla */</span> &#125;, &#123;</span><br><span class="line">  <span class="comment">// 不要忘了启用timestamps!</span></span><br><span class="line">  timestamps: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 不启用createdAt</span></span><br><span class="line">  createdAt: <span class="literal">false</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// updatedAt的字段名是updateTimestamp</span></span><br><span class="line">  updatedAt: <span class="string">'updateTimestamp'</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// deletedAt字段名是destroyTime (启用paranoid才能生效)</span></span><br><span class="line">  deletedAt: <span class="string">'destroyTime'</span>,</span><br><span class="line">  paranoid: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">  sequelize,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>你也能更改数据库engine，比如MyISAM。默认值是InnoDB</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">extends</span> <span class="title">Model</span> </span>&#123;&#125;</span><br><span class="line">Person.init(&#123; <span class="comment">/* attributes */</span> &#125;, &#123;</span><br><span class="line">  engine: <span class="string">'MYISAM'</span>,</span><br><span class="line">  sequelize</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// or globally</span></span><br><span class="line"><span class="keyword">const</span> sequelize = <span class="keyword">new</span> Sequelize(db, user, pw, &#123;</span><br><span class="line">  define: &#123; <span class="attr">engine</span>: <span class="string">'MYISAM'</span> &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>最后，你可以在MySQL和PG中给表增加注释</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">extends</span> <span class="title">Model</span> </span>&#123;&#125;</span><br><span class="line">Person.init(&#123; <span class="comment">/* attributes */</span> &#125;, &#123;</span><br><span class="line">  comment: <span class="string">"I'm a table comment!"</span>,</span><br><span class="line">  sequelize</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="乐观锁-Optimistic-Locking"><a href="#乐观锁-Optimistic-Locking" class="headerlink" title="乐观锁(Optimistic Locking)"></a>乐观锁(Optimistic Locking)</h1><p>Sequelize通过version原生支持乐观锁。默认是不启用的，可以通过设置version启用</p><p>乐观锁允许并发修改操作并且防止overwriting data冲突。当检测到冲突时，会抛出OptimisticLockError错误</p><h1 id="数据库同步"><a href="#数据库同步" class="headerlink" title="数据库同步"></a>数据库同步</h1><p>当开始一个新的项目时，你还不会有一个数据库结构,并且使用Sequelize你也不需要它。只需指定你的模型结构，并让库完成其余操作。目前支持的是创建和删除表:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Create the tables:</span></span><br><span class="line">Project.sync()</span><br><span class="line">Task.sync()</span><br><span class="line"></span><br><span class="line"><span class="comment">// Force the creation!</span></span><br><span class="line">Project.sync(&#123;<span class="attr">force</span>: <span class="literal">true</span>&#125;) <span class="comment">// this will drop the table first and re-create it afterwards</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// drop the tables:</span></span><br><span class="line">Project.drop()</span><br><span class="line">Task.drop()</span><br><span class="line"></span><br><span class="line"><span class="comment">// event handling:</span></span><br><span class="line">Project.[sync|drop]().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// ok ... everything is nice!</span></span><br><span class="line">&#125;).catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// oooh, did you enter wrong database credentials?</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>因为同步和删除所有的表可能要写很多行，你也可以让Sequelize来为做这些：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Sync all models that aren't already in the database</span></span><br><span class="line">sequelize.sync()</span><br><span class="line"></span><br><span class="line"><span class="comment">// Force sync all models</span></span><br><span class="line">sequelize.sync(&#123;<span class="attr">force</span>: <span class="literal">true</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Drop all tables</span></span><br><span class="line">sequelize.drop()</span><br><span class="line"></span><br><span class="line"><span class="comment">// emit handling:</span></span><br><span class="line">sequelize.[sync|drop]().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// woot woot</span></span><br><span class="line">&#125;).catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// whooops</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>因为<code>.sync({ force: true })</code>是具有破坏性的操作，可以使用<code>match</code>参数作为附加的安全检查。</p><p><code>match</code>参数可以通知Sequelize，以便在同步之前匹配正则表达式与数据库名称 - 在测试中使用<code>force:true</code>但不使用实时代码的情况下的安全检查。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// This will run .sync() only if database name ends with '_test'</span></span><br><span class="line">sequelize.sync(&#123; <span class="attr">force</span>: <span class="literal">true</span>, <span class="attr">match</span>: <span class="regexp">/_test$/</span> &#125;);</span><br></pre></td></tr></table></figure><h1 id="扩展model"><a href="#扩展model" class="headerlink" title="扩展model"></a>扩展model</h1><p>Sequelize 模型是ES6类。你可以轻松添加自定义实例或类级别的方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">Model</span> </span>&#123;</span><br><span class="line">  <span class="comment">// Adding a class level method</span></span><br><span class="line">  <span class="keyword">static</span> classLevelMethod() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'foo'</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Adding an instance level method</span></span><br><span class="line">  instanceLevelMethod() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'bar'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">User.init(&#123; <span class="attr">firstname</span>: Sequelize.STRING &#125;, &#123; sequelize &#125;);</span><br></pre></td></tr></table></figure><p>当然，你还可以访问实例的数据并生成虚拟的getter：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">Model</span> </span>&#123;</span><br><span class="line">  getFullname() &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">this</span>.firstname, <span class="keyword">this</span>.lastname].join(<span class="string">' '</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">User.init(&#123; <span class="attr">firstname</span>: Sequelize.STRING, <span class="attr">lastname</span>: Sequelize.STRING &#125;, &#123; sequelize &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Example:</span></span><br><span class="line">User.build(&#123; <span class="attr">firstname</span>: <span class="string">'foo'</span>, <span class="attr">lastname</span>: <span class="string">'bar'</span> &#125;).getFullname() <span class="comment">// 'foo bar'</span></span><br></pre></td></tr></table></figure><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><p>在<code>Model.sync()</code>或者<code>sequelize.sync</code>同步时，可以增加索引到模型定义中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">Model</span> </span>&#123;&#125;</span><br><span class="line">User.init(&#123;&#125;, &#123;</span><br><span class="line">  indexes: [</span><br><span class="line">    <span class="comment">// Create a unique index on email</span></span><br><span class="line">    &#123;</span><br><span class="line">      unique: <span class="literal">true</span>,</span><br><span class="line">      fields: [<span class="string">'email'</span>]</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Creates a gin index on data with the jsonb_path_ops operator</span></span><br><span class="line">    &#123;</span><br><span class="line">      fields: [<span class="string">'data'</span>],</span><br><span class="line">      using: <span class="string">'gin'</span>,</span><br><span class="line">      operator: <span class="string">'jsonb_path_ops'</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// By default index name will be [table]_[fields]</span></span><br><span class="line">    <span class="comment">// Creates a multi column partial index</span></span><br><span class="line">    &#123;</span><br><span class="line">      name: <span class="string">'public_by_author'</span>,</span><br><span class="line">      fields: [<span class="string">'author'</span>, <span class="string">'status'</span>],</span><br><span class="line">      where: &#123;</span><br><span class="line">        status: <span class="string">'public'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// A BTREE index with a ordered field</span></span><br><span class="line">    &#123;</span><br><span class="line">      name: <span class="string">'title_index'</span>,</span><br><span class="line">      using: <span class="string">'BTREE'</span>,</span><br><span class="line">      fields: [<span class="string">'author'</span>, &#123;<span class="attr">attribute</span>: <span class="string">'title'</span>, <span class="attr">collate</span>: <span class="string">'en_US'</span>, <span class="attr">order</span>: <span class="string">'DESC'</span>, <span class="attr">length</span>: <span class="number">5</span>&#125;]</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  sequelize</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍model的options选项&lt;/p&gt;
    
    </summary>
    
      <category term="Nodejs" scheme="http://yoursite.com/categories/Nodejs/"/>
    
    
      <category term="sequelize" scheme="http://yoursite.com/tags/sequelize/"/>
    
      <category term="数据库" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="ORM" scheme="http://yoursite.com/tags/ORM/"/>
    
      <category term="Nodejs" scheme="http://yoursite.com/tags/Nodejs/"/>
    
  </entry>
  
  <entry>
    <title>nodejs使用sequelize操作数据库</title>
    <link href="http://yoursite.com/posts/79706a60/"/>
    <id>http://yoursite.com/posts/79706a60/</id>
    <published>2019-06-30T09:04:50.000Z</published>
    <updated>2019-12-18T15:28:18.262Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>前一篇介绍了如何直连mysql，但是两种代码风格都有自身的弊端。这次主要探讨如何利用ORM操作数据库。</p><p>官方帮助文档：<a href="http://docs.sequelizejs.com/manual/getting-started.html" target="_blank" rel="noopener">getting-started</a></p><a id="more"></a><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>安装Sequelize：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save sequelize</span><br></pre></td></tr></table></figure><p>根据连接的数据库的不同，需要手动安装对应的驱动：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># One of the following:</span></span><br><span class="line">$ npm install --save pg pg-hstore <span class="comment"># Postgres</span></span><br><span class="line">$ npm install --save mysql2</span><br><span class="line">$ npm install --save mariadb</span><br><span class="line">$ npm install --save sqlite3</span><br><span class="line">$ npm install --save tedious <span class="comment"># Microsoft SQL Server</span></span><br></pre></td></tr></table></figure><h1 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h1><p>要连接数据库，必须创建一个sequelize实例。可以通过向构造函数传参数或者通过连接字符串创建</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Sequelize = <span class="built_in">require</span>(<span class="string">'sequelize'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Option 1: Passing parameters separately</span></span><br><span class="line"><span class="keyword">const</span> sequelize = <span class="keyword">new</span> Sequelize(<span class="string">'database'</span>, <span class="string">'username'</span>, <span class="string">'password'</span>, &#123;</span><br><span class="line">  host: <span class="string">'localhost'</span>,</span><br><span class="line">  dialect: <span class="comment">/* one of 'mysql' | 'mariadb' | 'postgres' | 'mssql' */</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Option 2: Passing a connection URI</span></span><br><span class="line"><span class="keyword">const</span> sequelize = <span class="keyword">new</span> Sequelize(<span class="string">'postgres://user:pass@example.com:5432/dbname'</span>);</span><br></pre></td></tr></table></figure><p>如果是SQLite数据库：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sequelize = <span class="keyword">new</span> Sequelize(&#123;</span><br><span class="line">  dialect: <span class="string">'sqlite'</span>,</span><br><span class="line">  storage: <span class="string">'path/to/database.sqlite'</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>我的代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Sequelize = <span class="built_in">require</span>(<span class="string">'sequelize'</span>);</span><br><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">'../config/config'</span>).db;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sequelize = <span class="keyword">new</span> Sequelize(config.database, config.user, config.password, &#123;</span><br><span class="line">    host: config.host,</span><br><span class="line">    dialect: config.type,</span><br><span class="line">    pool: &#123;</span><br><span class="line">        max: <span class="number">5</span>,</span><br><span class="line">        min: <span class="number">0</span>,</span><br><span class="line">        acquire: <span class="number">30000</span>,</span><br><span class="line">        idle: <span class="number">10000</span></span><br><span class="line">    &#125;,</span><br><span class="line">    define : &#123;</span><br><span class="line">        timestamps: <span class="literal">false</span>,</span><br><span class="line">        freezeTableName: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> sequelize;</span><br></pre></td></tr></table></figure><p>pool：每个实例创建一个最多5个连接的连接池</p><p>model：禁用每个表的<code>createdAt</code>和<code>updatedAt</code>自动更新，表名不会自动加上<code>s</code></p><h1 id="为每张表创建model"><a href="#为每张表创建model" class="headerlink" title="为每张表创建model"></a>为每张表创建model</h1><p>model是Sequelize.Model的子类，通过两种方法创建</p><p>第一种：<code>Sequelize.Model.init(attributes, options)</code>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Model = Sequelize.Model;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">Model</span> </span>&#123;&#125;</span><br><span class="line">User.init(&#123;</span><br><span class="line">  <span class="comment">// attributes</span></span><br><span class="line">  firstName: &#123;</span><br><span class="line">    type: Sequelize.STRING,</span><br><span class="line">    allowNull: <span class="literal">false</span></span><br><span class="line">  &#125;,</span><br><span class="line">  lastName: &#123;</span><br><span class="line">    type: Sequelize.STRING</span><br><span class="line">    <span class="comment">// allowNull defaults to true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;, &#123;</span><br><span class="line">  sequelize,</span><br><span class="line">  modelName: <span class="string">'user'</span></span><br><span class="line">  <span class="comment">// options</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>第二种：<code>sequelize.define</code>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> User = sequelize.define(<span class="string">'user'</span>, &#123;</span><br><span class="line">  <span class="comment">// attributes</span></span><br><span class="line">  firstName: &#123;</span><br><span class="line">    type: Sequelize.STRING,</span><br><span class="line">    allowNull: <span class="literal">false</span></span><br><span class="line">  &#125;,</span><br><span class="line">  lastName: &#123;</span><br><span class="line">    type: Sequelize.STRING</span><br><span class="line">    <span class="comment">// allowNull defaults to true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;, &#123;</span><br><span class="line">  <span class="comment">// options</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在内部实现上，<code>sequelize.define</code> 调用 <code>Model.init</code></p><p>上面的代码定义了一个<code>users</code>表，字段有<code>id</code>，<code>firstName</code>，<code>lastName</code>，<code>createdAt</code>，<code>updatedAt</code></p><p>其中，表名的<code>s</code>是自动加上去的，通过在<code>options</code>里设置<code>freezeTableName: true</code>可以防止自动添加，或者通过<code>Sequelize</code>的构造函数里的<code>option.define</code>设置成默认不自动添加。<code>createdAt</code>和<code>updatedAt</code>同理。<code>id</code>是自动添加的主键。</p><h1 id="同步model和数据库"><a href="#同步model和数据库" class="headerlink" title="同步model和数据库"></a>同步model和数据库</h1><p>如果你想让Sequelize通过model的定义自动创建（或按照需要修改）数据库表，可以用<code>sync</code>方法:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Note: 使用`force: true`如果表已存在会drop掉</span></span><br><span class="line">User.sync(&#123; <span class="attr">force</span>: <span class="literal">true</span> &#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 现在users表和model的定义是一样的了</span></span><br><span class="line">  <span class="keyword">return</span> User.create(&#123;</span><br><span class="line">    firstName: <span class="string">'John'</span>,</span><br><span class="line">    lastName: <span class="string">'Hancock'</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="一次同步所有model"><a href="#一次同步所有model" class="headerlink" title="一次同步所有model"></a>一次同步所有model</h2><p>如果不想每个model都调用一次<code>sync()</code>方法，你可以调用<code>sequelize.sync()</code>方法，这将会同步所有model</p><h2 id="生产环境"><a href="#生产环境" class="headerlink" title="生产环境"></a>生产环境</h2><p>在生产环境，你可能需要考虑在你的代码中使用<strong>迁移</strong>来代替调用<code>sync()</code>。官方文档：<a href="http://docs.sequelizejs.com/manual/migrations.html" target="_blank" rel="noopener">Migrations</a></p><h1 id="简单的增删改查"><a href="#简单的增删改查" class="headerlink" title="简单的增删改查"></a>简单的增删改查</h1><p>一些简单的语句：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Find all users</span></span><br><span class="line">User.findAll().then(<span class="function"><span class="params">users</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"All users:"</span>, <span class="built_in">JSON</span>.stringify(users, <span class="literal">null</span>, <span class="number">4</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Create a new user</span></span><br><span class="line">User.create(&#123; <span class="attr">firstName</span>: <span class="string">"Jane"</span>, <span class="attr">lastName</span>: <span class="string">"Doe"</span> &#125;).then(<span class="function"><span class="params">jane</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"Jane's auto-generated ID:"</span>, jane.id);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Delete everyone named "Jane"</span></span><br><span class="line">User.destroy(&#123;</span><br><span class="line">  where: &#123;</span><br><span class="line">    firstName: <span class="string">"Jane"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"Done"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Change everyone without a last name to "Doe"</span></span><br><span class="line">User.update(&#123; <span class="attr">lastName</span>: <span class="string">"Doe"</span> &#125;, &#123;</span><br><span class="line">  where: &#123;</span><br><span class="line">    lastName: <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"Done"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="Promises和async-await"><a href="#Promises和async-await" class="headerlink" title="Promises和async/await"></a>Promises和async/await</h1><p>Sequelize支持Promises，用的是bluebird。可以使用async/await语法糖，也可以使用bluebird的API（ <code>finally</code>, <code>tap</code>, <code>tapCatch</code>, <code>map</code>, <code>mapSeries</code>, 等等）</p><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><p>mysql常用的类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">Sequelize.STRING                      <span class="comment">// VARCHAR(255)</span></span><br><span class="line">Sequelize.STRING(<span class="number">1234</span>)                <span class="comment">// VARCHAR(1234)</span></span><br><span class="line">Sequelize.STRING.BINARY               <span class="comment">// VARCHAR BINARY</span></span><br><span class="line">Sequelize.TEXT                        <span class="comment">// TEXT</span></span><br><span class="line">Sequelize.TEXT(<span class="string">'tiny'</span>)                <span class="comment">// TINYTEXT</span></span><br><span class="line"></span><br><span class="line">Sequelize.INTEGER                     <span class="comment">// INTEGER</span></span><br><span class="line">Sequelize.BIGINT                      <span class="comment">// BIGINT</span></span><br><span class="line">Sequelize.BIGINT(<span class="number">11</span>)                  <span class="comment">// BIGINT(11)</span></span><br><span class="line"></span><br><span class="line">Sequelize.FLOAT                       <span class="comment">// FLOAT</span></span><br><span class="line">Sequelize.FLOAT(<span class="number">11</span>)                   <span class="comment">// FLOAT(11)</span></span><br><span class="line">Sequelize.FLOAT(<span class="number">11</span>, <span class="number">10</span>)               <span class="comment">// FLOAT(11,10)</span></span><br><span class="line"></span><br><span class="line">Sequelize.DOUBLE                      <span class="comment">// DOUBLE</span></span><br><span class="line">Sequelize.DOUBLE(<span class="number">11</span>)                  <span class="comment">// DOUBLE(11)</span></span><br><span class="line">Sequelize.DOUBLE(<span class="number">11</span>, <span class="number">10</span>)              <span class="comment">// DOUBLE(11,10)</span></span><br><span class="line"></span><br><span class="line">Sequelize.DECIMAL                     <span class="comment">// DECIMAL</span></span><br><span class="line">Sequelize.DECIMAL(<span class="number">10</span>, <span class="number">2</span>)              <span class="comment">// DECIMAL(10,2)</span></span><br><span class="line"></span><br><span class="line">Sequelize.DATE                        <span class="comment">// DATETIME for mysql / sqlite, TIMESTAMP WITH TIME ZONE for postgres</span></span><br><span class="line">Sequelize.DATE(<span class="number">6</span>)                     <span class="comment">// DATETIME(6) for mysql 5.6.4+. Fractional seconds support with up to 6 digits of precision</span></span><br><span class="line">Sequelize.DATEONLY                    <span class="comment">// DATE without time.</span></span><br><span class="line">Sequelize.BOOLEAN                     <span class="comment">// TINYINT(1)</span></span><br><span class="line"></span><br><span class="line">Sequelize.ENUM(<span class="string">'value 1'</span>, <span class="string">'value 2'</span>)  <span class="comment">// An ENUM with allowed values 'value 1' and 'value 2'</span></span><br><span class="line"></span><br><span class="line">Sequelize.JSON                        <span class="comment">// JSON column. PostgreSQL, SQLite and MySQL only.</span></span><br><span class="line"></span><br><span class="line">Sequelize.BLOB                        <span class="comment">// BLOB (bytea for PostgreSQL)</span></span><br><span class="line">Sequelize.BLOB(<span class="string">'tiny'</span>)                <span class="comment">// TINYBLOB (bytea for PostgreSQL. Other options are medium and long)</span></span><br><span class="line"></span><br><span class="line">Sequelize.UUID                        <span class="comment">// UUID datatype for PostgreSQL and SQLite, CHAR(36) BINARY for MySQL (use defaultValue: Sequelize.UUIDV1 or Sequelize.UUIDV4 to make sequelize generate the ids automatically)</span></span><br><span class="line"></span><br><span class="line">Sequelize.GEOMETRY                    <span class="comment">// Spatial column.  PostgreSQL (with PostGIS) or MySQL only.</span></span><br><span class="line">Sequelize.GEOMETRY(<span class="string">'POINT'</span>)           <span class="comment">// Spatial column with geometry type. PostgreSQL (with PostGIS) or MySQL only.</span></span><br><span class="line">Sequelize.GEOMETRY(<span class="string">'POINT'</span>, <span class="number">4326</span>)     <span class="comment">// Spatial column with geometry type and SRID.  PostgreSQL (with PostGIS) or MySQL only.</span></span><br></pre></td></tr></table></figure><p>In addition to the type mentioned above, integer, bigint, float and double also support unsigned and zerofill properties, which can be combined in any order: Be aware that this does not apply for PostgreSQL!</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Sequelize.INTEGER.UNSIGNED              <span class="comment">// INTEGER UNSIGNED</span></span><br><span class="line">Sequelize.INTEGER(<span class="number">11</span>).UNSIGNED          <span class="comment">// INTEGER(11) UNSIGNED</span></span><br><span class="line">Sequelize.INTEGER(<span class="number">11</span>).ZEROFILL          <span class="comment">// INTEGER(11) ZEROFILL</span></span><br><span class="line">Sequelize.INTEGER(<span class="number">11</span>).ZEROFILL.UNSIGNED <span class="comment">// INTEGER(11) UNSIGNED ZEROFILL</span></span><br><span class="line">Sequelize.INTEGER(<span class="number">11</span>).UNSIGNED.ZEROFILL <span class="comment">// INTEGER(11) UNSIGNED ZEROFILL</span></span><br></pre></td></tr></table></figure><p><em>The examples above only show integer, but the same can be done with bigint and float</em></p><p>Usage in object notation:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// for enums:</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyModel</span> <span class="keyword">extends</span> <span class="title">Model</span> </span>&#123;&#125;</span><br><span class="line">MyModel.init(&#123;</span><br><span class="line">  states: &#123;</span><br><span class="line">    type: Sequelize.ENUM,</span><br><span class="line">    values: [<span class="string">'active'</span>, <span class="string">'pending'</span>, <span class="string">'deleted'</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, &#123; sequelize &#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;前一篇介绍了如何直连mysql，但是两种代码风格都有自身的弊端。这次主要探讨如何利用ORM操作数据库。&lt;/p&gt;
&lt;p&gt;官方帮助文档：&lt;a href=&quot;http://docs.sequelizejs.com/manual/getting-started.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;getting-started&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="nodejs" scheme="http://yoursite.com/categories/nodejs/"/>
    
    
      <category term="nodejs" scheme="http://yoursite.com/tags/nodejs/"/>
    
      <category term="sequelize" scheme="http://yoursite.com/tags/sequelize/"/>
    
      <category term="数据库" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="ORM" scheme="http://yoursite.com/tags/ORM/"/>
    
  </entry>
  
  <entry>
    <title>nodejs操作mysql数据库</title>
    <link href="http://yoursite.com/posts/799a7dce/"/>
    <id>http://yoursite.com/posts/799a7dce/</id>
    <published>2019-06-29T11:24:22.000Z</published>
    <updated>2019-12-18T15:28:18.263Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文介绍了nodejs连接mysql数据库的一般操作方法</p><a id="more"></a><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p><code>npm install --save mysql</code></p><h1 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h1><p>config：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql:&#123;</span><br><span class="line">    host     : 'db',</span><br><span class="line">    user     : 'root',</span><br><span class="line">    password : 'password',</span><br><span class="line">    database : 'database',</span><br><span class="line">    host     : 'localhost',</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="callback-版本"><a href="#callback-版本" class="headerlink" title="callback 版本"></a>callback 版本</h2><p>sqlconnect.js:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mysql = <span class="built_in">require</span>(<span class="string">'mysql'</span>);</span><br><span class="line"><span class="keyword">var</span> config = <span class="built_in">require</span>(<span class="string">'../config'</span>).mysql;</span><br><span class="line"></span><br><span class="line">config.connectionLimit = <span class="number">50</span>;</span><br><span class="line"><span class="keyword">var</span> pool = mysql.createPool(config);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> query = <span class="function"><span class="keyword">function</span>(<span class="params">sql, params, callback</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> cb = <span class="built_in">arguments</span>[<span class="built_in">arguments</span>.length<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">var</span> useparam = <span class="built_in">arguments</span>.length == <span class="number">3</span>;</span><br><span class="line">    pool.getConnection(<span class="function"><span class="keyword">function</span> (<span class="params">err, conn</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (err) <span class="built_in">console</span>.log(<span class="string">"POOL ==&gt; "</span> + err);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (useparam) &#123;</span><br><span class="line">                conn.query(sql, params, <span class="function"><span class="keyword">function</span> (<span class="params">err, vals, fields</span>) </span>&#123;</span><br><span class="line">                    <span class="comment">//release connection</span></span><br><span class="line">                    conn.release();</span><br><span class="line">                    cb(err, vals, fields);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                conn.query(sql, <span class="function"><span class="keyword">function</span> (<span class="params">err, vals, fields</span>) </span>&#123;</span><br><span class="line">                    <span class="comment">//release connection</span></span><br><span class="line">                    conn.release();</span><br><span class="line">                    cb(err, vals, fields);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports= &#123;<span class="attr">query</span>:query,<span class="attr">pool</span>:pool&#125;;</span><br></pre></td></tr></table></figure><p>query.js:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sql = <span class="built_in">require</span>(<span class="string">'./sqlconnect'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  queryFunc: <span class="function"><span class="keyword">function</span> (<span class="params">data, cb</span>) </span>&#123;</span><br><span class="line">    sql.query(<span class="string">'query string'</span>, data, <span class="function"><span class="keyword">function</span> (<span class="params">err, vals</span>) </span>&#123;</span><br><span class="line">      cb(err,vals);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  transactonFunc: <span class="function"><span class="keyword">function</span> (<span class="params">data, cb</span>) </span>&#123;</span><br><span class="line">    sql.pool.getConnection( <span class="function"><span class="keyword">function</span> (<span class="params">err, connection</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        ...</span><br><span class="line">        connection.release();</span><br><span class="line">        cb(err);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        connection.query(<span class="string">'first query'</span>, data, <span class="function"><span class="keyword">function</span>(<span class="params">err, vals1</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            <span class="keyword">return</span> connection.rollback(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">              connection.release();</span><br><span class="line">              callback(err, <span class="literal">null</span>);</span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">const</span> otherData = vals1[<span class="number">0</span>];</span><br><span class="line">          connecton.query(<span class="string">'another query'</span>, [...data, ...otherData], <span class="function"><span class="keyword">function</span>(<span class="params">err, vals2</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (err) &#123;</span><br><span class="line">              <span class="keyword">return</span> connection.rollback(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                connection.release();</span><br><span class="line">                callback(err, <span class="literal">null</span>);</span><br><span class="line">              &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">            connection.commit(<span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">              <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                <span class="keyword">return</span> connection.rollback(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                  ...</span><br><span class="line">                  connection.release();</span><br><span class="line">                  callback(err, <span class="literal">null</span>);</span><br><span class="line">                &#125;)</span><br><span class="line">              &#125;</span><br><span class="line">              connection.release();</span><br><span class="line">              callback(<span class="literal">null</span>,vals2);</span><br><span class="line">            &#125;);</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="async-await-版本"><a href="#async-await-版本" class="headerlink" title="async/await 版本"></a>async/await 版本</h2><p>sqlconnect.js:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mysql = <span class="built_in">require</span>(<span class="string">'mysql'</span>);</span><br><span class="line"><span class="keyword">const</span> sqlConfig = <span class="built_in">require</span>(<span class="string">'../config'</span>).mysql;</span><br><span class="line">sqlConfig.connectionLimit = <span class="number">50</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> pool = mysql.createPool(sqlConfig);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> query = <span class="function"><span class="keyword">function</span>(<span class="params">sql, params = []</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        pool.getConnection(<span class="function"><span class="keyword">function</span> (<span class="params">err, conn</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"POOL ==&gt; "</span> + err);</span><br><span class="line">                reject(err);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            conn.query(sql, params, <span class="function"><span class="keyword">function</span> (<span class="params">err, values, fields</span>) </span>&#123;</span><br><span class="line">                <span class="comment">//release connection</span></span><br><span class="line">                conn.release();</span><br><span class="line">                err?reject(err):resolve(values);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports=query;</span><br></pre></td></tr></table></figure><p>query.js:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sql = <span class="built_in">require</span>(<span class="string">'./sqlconnect'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    queryFunc: <span class="keyword">async</span> (data) =&gt;&#123;</span><br><span class="line">        <span class="keyword">const</span> val = <span class="keyword">await</span> sql(<span class="string">'sql string'</span>, [...data]);</span><br><span class="line">        <span class="keyword">return</span> val;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>两种方式都不是很理想。callback陷入了回调地狱，而async版本由于node-mysql库的限制，本人的能力有限，没有改写出promise。</p><p>之前在网上找了很久合适的mysql库，终于找到一个不错的nodejs的ORM库。见下一篇。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;本文介绍了nodejs连接mysql数据库的一般操作方法&lt;/p&gt;
    
    </summary>
    
      <category term="nodejs" scheme="http://yoursite.com/categories/nodejs/"/>
    
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
      <category term="nodejs" scheme="http://yoursite.com/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>微信服务号支付</title>
    <link href="http://yoursite.com/posts/7644/"/>
    <id>http://yoursite.com/posts/7644/</id>
    <published>2019-06-10T15:07:52.000Z</published>
    <updated>2019-12-18T15:28:18.265Z</updated>
    
    <content type="html"><![CDATA[<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>微信认证服务号，已开通微信支付</p><p>支付域名：wxpay.cyrilxu.cn</p><p>语言：nodejs</p><h1 id="支付流程"><a href="#支付流程" class="headerlink" title="支付流程"></a>支付流程</h1><a id="more"></a><p><img src="/posts/7644/chapter7_4_1.png" alt></p><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><ul><li>网页授权，为了获取openid。详见上一篇</li><li>配置商户，在公众号的微信支付页面，关联微信商户号</li><li>在微信支付商户设置，产品中心 —&gt; 开发配置 —&gt;支付配置—&gt;JSAPI授权目录。<strong>现在支持根目录了</strong></li><li>在微信商户设置中，账户中心—&gt;API安全—&gt;API密钥，设置API密钥，记住。<strong>牢记，以后只能修改不能查看。存放在服务器端</strong></li></ul><h1 id="具体流程"><a href="#具体流程" class="headerlink" title="具体流程"></a>具体流程</h1><ol><li>获取openid，详见上一篇</li><li>生成订单</li><li>调用统一下单API获取预付单信息（prepay_id）</li><li>生成jsapi付款参数并签名</li><li>付款页付款，成功则跳转成功页</li><li>后台接收付款信息</li><li>前台请求付款信息</li></ol><h1 id="Talk-is-cheap-show-you-the-code"><a href="#Talk-is-cheap-show-you-the-code" class="headerlink" title="Talk is cheap, show you the code"></a>Talk is cheap, show you the code</h1><ol><li><p>获取openid，<a href="/posts/48327">微信获取用户信息</a></p></li><li><p>生成订单信息：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">openid：openid,</span><br><span class="line">order_num: 自己系统的订单号,</span><br><span class="line">pay_money: 付款金额，单位为分,</span><br><span class="line">attach: 产品名称</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li><p>获取prepay_id:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取微信统一下单的接口数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">getPrepayId: <span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params">obj, config</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// var that = this;</span></span><br><span class="line">    <span class="comment">// 生成统一下单接口参数</span></span><br><span class="line">    <span class="keyword">var</span> UnifiedorderParams = &#123;</span><br><span class="line">        appid : config.wxappid,</span><br><span class="line">        attach : obj.attach,</span><br><span class="line">        body : obj.body,</span><br><span class="line">        mch_id : config.mch_id,</span><br><span class="line">        nonce_str: obj.nonce_str,</span><br><span class="line">        notify_url : obj.notify_url,<span class="comment">// 微信付款后的回调地址</span></span><br><span class="line">        openid : obj.openid,</span><br><span class="line">        out_trade_no : obj.order_num, <span class="comment">//订单号</span></span><br><span class="line">        <span class="comment">// spbill_create_ip : obj.spbill_create_ip,</span></span><br><span class="line">        total_fee : obj.total_fee,</span><br><span class="line">        trade_type : <span class="string">'JSAPI'</span>,</span><br><span class="line">        <span class="comment">// sign : getSign(),</span></span><br><span class="line">    &#125;;</span><br><span class="line">    UnifiedorderParams.sign = <span class="keyword">this</span>.getSign(UnifiedorderParams); <span class="comment">//签名算法，见附录</span></span><br><span class="line">    <span class="keyword">var</span> postBody = <span class="keyword">this</span>.getUnifiedorderXmlParams(UnifiedorderParams); <span class="comment">//生成xml</span></span><br><span class="line">    <span class="keyword">var</span> url = <span class="string">'https://api.mch.weixin.qq.com/pay/unifiedorder'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> opt = &#123;</span><br><span class="line">        url: url,</span><br><span class="line">        body: postBody,</span><br><span class="line">        method: <span class="string">'POST'</span>,</span><br><span class="line">        <span class="comment">// json: true,</span></span><br><span class="line">        resolveWithFullResponse: <span class="literal">true</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> &#123;statusCode, body&#125; = <span class="keyword">await</span> request(opt);</span><br><span class="line">    <span class="keyword">if</span> (statusCode === <span class="number">200</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> prepay_id = <span class="keyword">this</span>.getXMLNodeValue(<span class="string">'prepay_id'</span>, body.toString(<span class="string">"utf-8"</span>));</span><br><span class="line">        <span class="keyword">var</span> tmp = prepay_id.split(<span class="string">'['</span>);</span><br><span class="line">        <span class="keyword">var</span> tmp1 = tmp[<span class="number">2</span>].split(<span class="string">']'</span>);</span><br><span class="line">        prepay_id = tmp1[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">return</span> prepay_id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li></ol><ol start="4"><li><p>生成jsapi参数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 微信支付的所有参数</span></span><br><span class="line"><span class="comment"> * @param req 请求的资源, 获取必要的数据</span></span><br><span class="line"><span class="comment"> * @returns &#123;appId: string, timeStamp: Number, nonceStr: *, package: string, signType: string, paySign: *&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">getBrandWCPayParams: <span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params">obj, config</span>)</span>&#123;</span><br><span class="line">    obj.nonce_str = <span class="keyword">this</span>.createNonceStr(); <span class="comment">//随机字符串</span></span><br><span class="line">    <span class="comment">//统一下单id</span></span><br><span class="line">    <span class="keyword">const</span> prepay_id = <span class="keyword">await</span> <span class="keyword">this</span>.getPrepayId(obj);</span><br><span class="line">    <span class="keyword">var</span> wcPayParams = &#123;</span><br><span class="line">        <span class="string">"appId"</span> : config.wxappid,     <span class="comment">//公众号名称，由商户传入</span></span><br><span class="line">        <span class="string">"timeStamp"</span> : <span class="built_in">parseInt</span>(<span class="keyword">new</span> <span class="built_in">Date</span>().getTime() / <span class="number">1000</span>).toString(),         <span class="comment">//时间戳，自1970年以来的秒数</span></span><br><span class="line">        <span class="string">"nonceStr"</span> : obj.nonce_str, <span class="comment">//随机串</span></span><br><span class="line">        <span class="comment">// 通过统一下单接口获取</span></span><br><span class="line">        <span class="string">"package"</span> : <span class="string">"prepay_id="</span>+prepay_id,</span><br><span class="line">        <span class="string">"signType"</span> : <span class="string">"MD5"</span>        <span class="comment">//微信签名方式：</span></span><br><span class="line">    &#125;;</span><br><span class="line">    wcPayParams.paySign = <span class="keyword">this</span>.getSign(wcPayParams); <span class="comment">//微信支付签名</span></span><br><span class="line">    <span class="keyword">return</span> wcPayParams;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li></ol><ol start="5"><li><p>付款页js：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> wxJsApiParam;<span class="comment">//微信下单参数</span></span><br><span class="line"><span class="keyword">var</span> errMsg = <span class="string">''</span>;<span class="comment">//微信返回支付错误信息</span></span><br><span class="line"><span class="keyword">var</span> wexin_state = <span class="number">1</span>;<span class="comment">//微信按钮初始状态为1，点击可下单付款，2时点击不能下单仅付款,3时不能点击</span></span><br><span class="line"></span><br><span class="line">$(<span class="string">'#paylink'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'wexin_state'</span>, wexin_state);</span><br><span class="line">    <span class="keyword">if</span> (wexin_state == <span class="number">1</span>)&#123;</span><br><span class="line">        wexin_state = <span class="number">3</span>;</span><br><span class="line">        goWepay();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (wexin_state == <span class="number">2</span>) &#123;</span><br><span class="line">        callpay();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//下单</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">goWepay</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        url: <span class="string">'dopay'</span>,<span class="comment">//获取微信支付jsapi参数：wcPayParams</span></span><br><span class="line">        type: <span class="string">'POST'</span>,</span><br><span class="line">        dataType: <span class="string">'json'</span>,</span><br><span class="line">        data:&#123;</span><br><span class="line">            openid:openid,</span><br><span class="line">            order_num: order_num,</span><br><span class="line">            attach:attach,</span><br><span class="line">            pay_money:pay_money</span><br><span class="line">            &#125;,</span><br><span class="line">        success:<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'data:'</span>, data);</span><br><span class="line">            wexin_state = data.state;</span><br><span class="line">            wxJsApiParam = data.param;</span><br><span class="line">            callpay();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用微信JS api 支付</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">callpay</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'WeixinJSBridge:'</span>, WeixinJSBridge);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> WeixinJSBridge == <span class="string">"undefined"</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">document</span>.addEventListener) &#123;</span><br><span class="line">            <span class="built_in">document</span>.addEventListener(<span class="string">'WeixinJSBridgeReady'</span>, jsApiCall,<span class="literal">false</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">document</span>.attachEvent) &#123;</span><br><span class="line">            <span class="built_in">document</span>.attachEvent(<span class="string">'WeixinJSBridgeReady'</span>, jsApiCall);</span><br><span class="line">            <span class="built_in">document</span>.attachEvent(<span class="string">'onWeixinJSBridgeReady'</span>, jsApiCall);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        onBridgeReady();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onBridgeReady</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'wxJsApiParam:'</span>,wxJsApiParam);</span><br><span class="line">    <span class="keyword">if</span> (wxJsApiParam != <span class="literal">null</span>) &#123;<span class="comment">//如果订单生成成功 %&gt;</span></span><br><span class="line">        WeixinJSBridge.invoke(</span><br><span class="line">            <span class="string">'getBrandWCPayRequest'</span>,</span><br><span class="line">            wxJsApiParam,<span class="comment">//json串</span></span><br><span class="line">            <span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(res.err_msg == <span class="string">"get_brand_wcpay_request:ok"</span> ) &#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">"ok"</span>);</span><br><span class="line">                    <span class="built_in">window</span>.location.href = <span class="string">"success?order="</span> + order_num;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 使用以上方式判断前端返回,微信团队郑重提示:res.err_msg将在用户支付成功后返回</span></span><br><span class="line">                <span class="comment">// ok，但并不保证它绝对可靠。</span></span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">"fail"</span>);</span><br><span class="line">                    <span class="built_in">console</span>.log(res);</span><br><span class="line"><span class="comment">//                            window.location.href = "/weixinpay/failed"</span></span><br><span class="line"><span class="comment">//                            alert("支付失败")</span></span><br><span class="line">                &#125;</span><br><span class="line">                WeixinJSBridge.log(res.err_msg);</span><br><span class="line">            &#125;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol start="6"><li><p>接收付款信息：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">router.post(<span class="string">'/notify'</span>, <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// console.log('notify post:', body);</span></span><br><span class="line">    req.on(<span class="string">"data"</span>,<span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">        xmlParser.parseString(data.toString(), <span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params">err, result</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> body = result.xml;</span><br><span class="line">            <span class="keyword">var</span> keys = <span class="built_in">Object</span>.keys(body);</span><br><span class="line">            <span class="keyword">var</span> parseBody = &#123;&#125;;</span><br><span class="line">            keys.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">key</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (key!=<span class="string">'sign'</span>) &#123;</span><br><span class="line">                    parseBody[key] = body[key][<span class="number">0</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="comment">// console.log(parseBody);</span></span><br><span class="line">            <span class="keyword">if</span> (parseBody.result_code == <span class="string">'SUCCESS'</span> &amp;&amp; wx.getSign(parseBody) == body.sign[<span class="number">0</span>])&#123;</span><br><span class="line">                <span class="comment">//业务代码</span></span><br><span class="line">                <span class="comment">//发送成功接收</span></span><br><span class="line">                <span class="keyword">var</span> xml = &#123;<span class="attr">xml</span>:&#123;</span><br><span class="line">                    return_code:<span class="string">'SUCCESS'</span>,</span><br><span class="line">                    return_msg:<span class="string">'OK'</span></span><br><span class="line">                &#125;&#125;;</span><br><span class="line">                res.send(xmlBuilder.buildObject(xml))</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ol><ol start="7"><li><p>ajax查询付款信息：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkCode</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        url: <span class="string">'checkOrder?order=&lt;%=order_num%&gt;'</span>,</span><br><span class="line">        method: <span class="string">'GET'</span>,</span><br><span class="line">        success: <span class="function">(<span class="params">data</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (data.state == <span class="number">200</span>) &#123;</span><br><span class="line">                $(<span class="string">'#check'</span>).html(data.data);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                setTimeout(checkCode, <span class="number">3000</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        error: <span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">            setTimeout(checkCode, <span class="number">3000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">$(()=&gt;&#123;checkCode()&#125;)</span><br></pre></td></tr></table></figure></li></ol><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取随机的NonceStr</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">createNonceStr: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.random().toString(<span class="number">36</span>).substr(<span class="number">2</span>, <span class="number">15</span>);</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取微信支付的签名</span></span><br><span class="line"><span class="comment"> * @param payParams</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">getSign: <span class="function"><span class="keyword">function</span>(<span class="params">args, config = aijia</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> keys = <span class="built_in">Object</span>.keys(args);</span><br><span class="line">    keys = keys.sort();</span><br><span class="line">    <span class="keyword">var</span> newArgs = &#123;&#125;;</span><br><span class="line">    keys.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">key</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (args[key] &amp;&amp; args[key]!==<span class="string">''</span>)</span><br><span class="line">            newArgs[key] = args[key];</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> string = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> newArgs) &#123;</span><br><span class="line">        string += <span class="string">'&amp;'</span> + k + <span class="string">'='</span> + newArgs[k];</span><br><span class="line">    &#125;</span><br><span class="line">    string = string.substr(<span class="number">1</span>) + <span class="string">'&amp;key='</span>+config.wxpaykey;</span><br><span class="line">    <span class="keyword">return</span> crypto.createHash(<span class="string">'md5'</span>).update(string,<span class="string">'utf8'</span>).digest(<span class="string">'hex'</span>).toUpperCase();</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生成微信统一下单参数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">getUnifiedorderXmlParams : <span class="function"><span class="keyword">function</span>(<span class="params">obj, config = aijia</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> body = <span class="string">'&lt;xml&gt; '</span> +</span><br><span class="line">        <span class="string">'&lt;appid&gt;'</span>+config.wxappid+<span class="string">'&lt;/appid&gt; '</span> +</span><br><span class="line">        <span class="string">'&lt;attach&gt;'</span>+obj.attach+<span class="string">'&lt;/attach&gt; '</span> +</span><br><span class="line">        <span class="string">'&lt;body&gt;'</span>+obj.body+<span class="string">'&lt;/body&gt; '</span> +</span><br><span class="line">        <span class="string">'&lt;mch_id&gt;'</span>+config.mch_id+<span class="string">'&lt;/mch_id&gt; '</span> +</span><br><span class="line">        <span class="string">'&lt;nonce_str&gt;'</span>+obj.nonce_str+<span class="string">'&lt;/nonce_str&gt; '</span> +</span><br><span class="line">        <span class="string">'&lt;notify_url&gt;'</span>+obj.notify_url+<span class="string">'&lt;/notify_url&gt;'</span> +</span><br><span class="line">        <span class="string">'&lt;openid&gt;'</span>+obj.openid+<span class="string">'&lt;/openid&gt; '</span> +</span><br><span class="line">        <span class="string">'&lt;out_trade_no&gt;'</span>+obj.out_trade_no+<span class="string">'&lt;/out_trade_no&gt;'</span>+</span><br><span class="line">        <span class="string">'&lt;spbill_create_ip&gt;&lt;/spbill_create_ip&gt; '</span> +</span><br><span class="line">        <span class="string">'&lt;total_fee&gt;'</span>+obj.total_fee+<span class="string">'&lt;/total_fee&gt; '</span> +</span><br><span class="line">        <span class="string">'&lt;trade_type&gt;JSAPI&lt;/trade_type&gt; '</span> +</span><br><span class="line">        <span class="string">'&lt;sign&gt;'</span>+obj.sign+<span class="string">'&lt;/sign&gt; '</span> +</span><br><span class="line">        <span class="string">'&lt;/xml&gt;'</span>;</span><br><span class="line">    <span class="keyword">return</span> body;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取xml中node值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">getXMLNodeValue: <span class="function"><span class="keyword">function</span>(<span class="params">node_name, xml</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> tmp = xml.split(<span class="string">"&lt;"</span> + node_name + <span class="string">"&gt;"</span>);</span><br><span class="line">    <span class="keyword">var</span> _tmp = tmp[<span class="number">1</span>].split(<span class="string">"&lt;/"</span> + node_name + <span class="string">"&gt;"</span>);</span><br><span class="line">    <span class="keyword">return</span> _tmp[<span class="number">0</span>];</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h1&gt;&lt;p&gt;微信认证服务号，已开通微信支付&lt;/p&gt;
&lt;p&gt;支付域名：wxpay.cyrilxu.cn&lt;/p&gt;
&lt;p&gt;语言：nodejs&lt;/p&gt;
&lt;h1 id=&quot;支付流程&quot;&gt;&lt;a href=&quot;#支付流程&quot; class=&quot;headerlink&quot; title=&quot;支付流程&quot;&gt;&lt;/a&gt;支付流程&lt;/h1&gt;
    
    </summary>
    
      <category term="微信" scheme="http://yoursite.com/categories/%E5%BE%AE%E4%BF%A1/"/>
    
      <category term="nodejs" scheme="http://yoursite.com/categories/%E5%BE%AE%E4%BF%A1/nodejs/"/>
    
    
      <category term="nodejs" scheme="http://yoursite.com/tags/nodejs/"/>
    
      <category term="微信" scheme="http://yoursite.com/tags/%E5%BE%AE%E4%BF%A1/"/>
    
      <category term="微信支付" scheme="http://yoursite.com/tags/%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98/"/>
    
  </entry>
  
  <entry>
    <title>微信获取用户信息</title>
    <link href="http://yoursite.com/posts/48327/"/>
    <id>http://yoursite.com/posts/48327/</id>
    <published>2019-05-21T15:13:00.000Z</published>
    <updated>2019-12-18T15:28:18.267Z</updated>
    
    <content type="html"><![CDATA[<p>用户在微信客户端中访问第三方网页，公众号可以通过微信网页授权机制，来获取用户基本信息，进而实现业务逻辑。</p><h1 id="网页授权回调域名"><a href="#网页授权回调域名" class="headerlink" title="网页授权回调域名"></a>网页授权回调域名</h1><p>1、在微信公众号请求用户网页授权之前，开发者需要先到公众平台官网中的“开发 - 接口权限 - 网页服务 - 网页帐号 - 网页授权获取用户基本信息”的配置选项中，修改授权回调域名。请注意，这里填写的是域名（是一个字符串），而不是URL，因此请勿加 http:// 等协议头；</p><p>2、授权回调域名配置规范为全域名，比如需要网页授权的域名为：<a href="http://www.cyril.cn，配置以后此域名下面的页面" target="_blank" rel="noopener">www.cyril.cn，配置以后此域名下面的页面</a><a href="http://www.cyril.cn/pay.html" target="_blank" rel="noopener">http://www.cyril.cn/pay.html</a> 、 <a href="http://www.cyril.cn/music" target="_blank" rel="noopener">http://www.cyril.cn/music</a> 都可以进行OAuth2.0鉴权。但<a href="http://pay.cyrilxu.cn/" target="_blank" rel="noopener">http://pay.cyrilxu.cn/</a> 、<a href="http://music.cyrilxu.cn" target="_blank" rel="noopener">http://music.cyrilxu.cn</a> 、<a href="http://cyrilxu.cn" target="_blank" rel="noopener">http://cyrilxu.cn</a> 无法进行OAuth2.0鉴权</p><a id="more"></a><p><img src="/posts/48327/interfaceAuth.png" alt></p><p><img src="/posts/48327/setAuth.png" alt></p><h1 id="两种scope"><a href="#两种scope" class="headerlink" title="两种scope"></a>两种scope</h1><ol><li>scope = snsapi_base 获取用户openid，用户无感</li><li>scope = snsapi_userinfo 获取用户基本信息（头像、昵称等），需要用户点击授权</li></ol><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><ol><li>获取code</li><li>通过code获取access_token</li><li>刷新token（如果需要）</li><li>拉取用户信息</li></ol><h2 id="1-获取code"><a href="#1-获取code" class="headerlink" title="1. 获取code"></a>1. 获取code</h2><p>构造url，授权后会返回到redirect_uri，在此路径处理code：</p><p><a href="https://open.weixin.qq.com/connect/oauth2/authorize" target="_blank" rel="noopener">https://open.weixin.qq.com/connect/oauth2/authorize</a>? appid= <strong><code>APPID</code></strong> &amp; redirect_uri=<strong><code>REDIRECT_URI</code></strong> &amp; response_type= code &amp; scope= <strong>SCOPE</strong> &amp; state= <strong><code>STATE</code></strong> #wechat_redirect</p><p>由于授权操作安全等级较高，所以在发起授权请求时，微信会对授权链接做正则强匹配校验，如果链接的<strong>参数顺序</strong>不对，授权页面将无法正常访问</p><p>参数说明</p><table><thead><tr><th align="left">参数</th><th align="left">是否必须</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">appid</td><td align="left">是</td><td align="left">公众号的唯一标识</td></tr><tr><td align="left">redirect_uri</td><td align="left">是</td><td align="left">授权后重定向的回调链接地址， 请使用 urlEncode 对链接进行处理</td></tr><tr><td align="left">response_type</td><td align="left">是</td><td align="left">返回类型，请填写code</td></tr><tr><td align="left">scope</td><td align="left">是</td><td align="left">应用授权作用域，snsapi_base （不弹出授权页面，直接跳转，只能获取用户openid），snsapi_userinfo （弹出授权页面，可通过openid拿到昵称、性别、所在地。并且， 即使在未关注的情况下，只要用户授权，也能获取其信息 ）</td></tr><tr><td align="left">state</td><td align="left">否</td><td align="left">重定向后会带上state参数，开发者可以填写a-zA-Z0-9的参数值，最多128字节</td></tr><tr><td align="left">#wechat_redirect</td><td align="left">是</td><td align="left">无论直接打开还是做页面302重定向时候，必须带此参数</td></tr></tbody></table><p><strong>用户同意授权后</strong></p><p>如果用户同意授权，页面将跳转至 redirect_uri/?code=<strong><code>CODE</code></strong>&amp;state=<strong><code>STATE</code></strong>。</p><p>code说明 ： code作为换取access_token的票据，每次用户授权带上的code将不一样，code只能使用一次，5分钟未被使用自动过期。</p><p><strong>错误返回码说明如下：</strong></p><table><thead><tr><th align="left">返回码</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">10003</td><td align="left">redirect_uri域名与后台配置不一致</td></tr><tr><td align="left">10004</td><td align="left">此公众号被封禁</td></tr><tr><td align="left">10005</td><td align="left">此公众号并没有这些scope的权限</td></tr><tr><td align="left">10006</td><td align="left">必须关注此测试号</td></tr><tr><td align="left">10009</td><td align="left">操作太频繁了，请稍后重试</td></tr><tr><td align="left">10010</td><td align="left">scope不能为空</td></tr><tr><td align="left">10011</td><td align="left">redirect_uri不能为空</td></tr><tr><td align="left">10012</td><td align="left">appid不能为空</td></tr><tr><td align="left">10013</td><td align="left">state不能为空</td></tr><tr><td align="left">10015</td><td align="left">公众号未授权第三方平台，请检查授权状态</td></tr><tr><td align="left">10016</td><td align="left">不支持微信开放平台的Appid，请使用公众号Appid</td></tr></tbody></table><h2 id="2-通过code换取网页授权access-token"><a href="#2-通过code换取网页授权access-token" class="headerlink" title="2. 通过code换取网页授权access_token"></a>2. 通过code换取网页授权access_token</h2><p><strong>这里通过code换取的是一个特殊的网页授权access_token,与基础支持中的access_token（该access_token用于调用其他接口）不同</strong></p><p><strong>如果网页授权的作用域为snsapi_base，则本步骤中获取到网页授权access_token的同时，也获取到了openid，snsapi_base式的网页授权流程即到此为止</strong></p><p>访问：</p><p><a href="https://api.weixin.qq.com/sns/oauth2/access_token" target="_blank" rel="noopener">https://api.weixin.qq.com/sns/oauth2/access_token</a>? appid= <strong><code>APPID</code></strong> &amp; secret= <strong><code>SECRET</code></strong> &amp; code= <strong><code>CODE</code></strong> &amp; grant_type= authorization_code</p><p>参数说明</p><table><thead><tr><th align="left">参数</th><th align="left">是否必须</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">appid</td><td align="left">是</td><td align="left">公众号的唯一标识</td></tr><tr><td align="left">secret</td><td align="left">是</td><td align="left">公众号的appsecret</td></tr><tr><td align="left">code</td><td align="left">是</td><td align="left">填写第一步获取的code参数</td></tr><tr><td align="left">grant_type</td><td align="left">是</td><td align="left">填写为authorization_code</td></tr></tbody></table><p>返回说明</p><p>正确时返回的JSON数据包如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"access_token"</span>:<span class="string">"ACCESS_TOKEN"</span>,</span><br><span class="line">    <span class="attr">"expires_in"</span>:<span class="number">7200</span>,</span><br><span class="line">    <span class="attr">"refresh_token"</span>:<span class="string">"REFRESH_TOKEN"</span>,</span><br><span class="line">    <span class="attr">"openid"</span>:<span class="string">"OPENID"</span>,</span><br><span class="line">    <span class="attr">"scope"</span>:<span class="string">"SCOPE"</span> </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">access_token</td><td align="left">网页授权接口调用凭证,注意：此access_token与基础支持的access_token不同</td></tr><tr><td align="left">expires_in</td><td align="left">access_token接口调用凭证超时时间，单位（秒）</td></tr><tr><td align="left">refresh_token</td><td align="left">用户刷新access_token</td></tr><tr><td align="left">openid</td><td align="left">用户唯一标识，请注意，在未关注公众号时，用户访问公众号的网页，也会产生一个用户和公众号唯一的OpenID</td></tr><tr><td align="left">scope</td><td align="left">用户授权的作用域，使用逗号（,）分隔</td></tr></tbody></table><p>错误时微信会返回JSON数据包如下（示例为Code无效错误）:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"errcode"</span>:<span class="number">40029</span>,<span class="attr">"errmsg"</span>:<span class="string">"invalid code"</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="3-刷新access-token（如需要"><a href="#3-刷新access-token（如需要" class="headerlink" title="3. 刷新access_token（如需要)"></a>3. 刷新access_token（如需要)</h2><p>access_token拥有较短的有效期，当access_token超时后，可以使用refresh_token进行刷新，refresh_token有效期为30天，当refresh_token失效之后，需要用户重新授权。</p><p>请求：</p><p><a href="https://api.weixin.qq.com/sns/oauth2/refresh_token" target="_blank" rel="noopener">https://api.weixin.qq.com/sns/oauth2/refresh_token</a>? appid= <strong><code>APPID</code></strong> &amp; grant_type= refresh_token &amp; refresh_token= <strong><code>REFRESH_TOKEN</code></strong></p><table><thead><tr><th align="left">参数</th><th align="left">是否必须</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">appid</td><td align="left">是</td><td align="left">公众号的唯一标识</td></tr><tr><td align="left">grant_type</td><td align="left">是</td><td align="left">填写为refresh_token</td></tr><tr><td align="left">refresh_token</td><td align="left">是</td><td align="left">填写通过access_token获取到的refresh_token参数</td></tr></tbody></table><p>正确时返回的JSON数据包如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123; </span><br><span class="line">    <span class="attr">"access_token"</span>:<span class="string">"ACCESS_TOKEN"</span>,</span><br><span class="line">    <span class="attr">"expires_in"</span>:<span class="number">7200</span>,</span><br><span class="line">    <span class="attr">"refresh_token"</span>:<span class="string">"REFRESH_TOKEN"</span>,</span><br><span class="line">    <span class="attr">"openid"</span>:<span class="string">"OPENID"</span>,</span><br><span class="line">    <span class="attr">"scope"</span>:<span class="string">"SCOPE"</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">access_token</td><td align="left">网页授权接口调用凭证,注意：此access_token与基础支持的access_token不同</td></tr><tr><td align="left">expires_in</td><td align="left">access_token接口调用凭证超时时间，单位（秒）</td></tr><tr><td align="left">refresh_token</td><td align="left">用户刷新access_token</td></tr><tr><td align="left">openid</td><td align="left">用户唯一标识</td></tr><tr><td align="left">scope</td><td align="left">用户授权的作用域，使用逗号（,）分隔</td></tr></tbody></table><p>错误时微信会返回JSON数据包如下（示例为code无效错误）:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"errcode"</span>:<span class="number">40029</span>,<span class="attr">"errmsg"</span>:<span class="string">"invalid code"</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="4-拉取用户信息"><a href="#4-拉取用户信息" class="headerlink" title="4. 拉取用户信息"></a>4. 拉取用户信息</h2><p>scope=snsapi_userinfo时，通过access_token和code拉取用户信息：</p><p><a href="https://api.weixin.qq.com/sns/userinfo" target="_blank" rel="noopener">https://api.weixin.qq.com/sns/userinfo</a>? access_token= <strong><code>ACCESS_TOKEN</code></strong> &amp; openid= <strong><code>OPENID</code></strong> &amp; lang= <strong><code>zh_CN</code></strong></p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">access_token</td><td align="left">网页授权接口调用凭证,注意：此access_token与基础支持的access_token不同</td></tr><tr><td align="left">openid</td><td align="left">用户的唯一标识</td></tr><tr><td align="left">lang</td><td align="left">返回国家地区语言版本，zh_CN 简体，zh_TW 繁体，en 英语</td></tr></tbody></table><p>正确时返回的JSON数据包如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;   </span><br><span class="line">    <span class="attr">"openid"</span>:<span class="string">" OPENID"</span>,</span><br><span class="line">    <span class="attr">" nickname"</span>: NICKNAME,</span><br><span class="line">    <span class="attr">"sex"</span>:<span class="string">"1"</span>,</span><br><span class="line">    <span class="attr">"province"</span>:<span class="string">"PROVINCE"</span></span><br><span class="line">    <span class="string">"city"</span>:<span class="string">"CITY"</span>,</span><br><span class="line">    <span class="attr">"country"</span>:<span class="string">"COUNTRY"</span>,</span><br><span class="line">    <span class="attr">"headimgurl"</span>:       <span class="string">"http://thirdwx.qlogo.cn/mmopen/g3MonUZtNHkdmzicIlibx6iaFqAc56vxLSUfpb6n5WKSYVY0ChQKkiaJSgQ1dZuTOgvLLrhJbERQQ4eMsv84eavHiaiceqxibJxCfHe/46"</span>,</span><br><span class="line">    <span class="attr">"privilege"</span>:[<span class="string">"PRIVILEGE1"</span> <span class="string">"PRIVILEGE2"</span>],</span><br><span class="line">    <span class="attr">"unionid"</span>: <span class="string">"o6_bmasdasdsad6_2sgVt7hMZOPfL"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">openid</td><td align="left">用户的唯一标识</td></tr><tr><td align="left">nickname</td><td align="left">用户昵称</td></tr><tr><td align="left">sex</td><td align="left">用户的性别，值为1时是男性，值为2时是女性，值为0时是未知</td></tr><tr><td align="left">province</td><td align="left">用户个人资料填写的省份</td></tr><tr><td align="left">city</td><td align="left">普通用户个人资料填写的城市</td></tr><tr><td align="left">country</td><td align="left">国家，如中国为CN</td></tr><tr><td align="left">headimgurl</td><td align="left">用户头像，最后一个数值代表正方形头像大小（有0、46、64、96、132数值可选，0代表640*640正方形头像），用户没有头像时该项为空。若用户更换头像，原有头像URL将失效。</td></tr><tr><td align="left">privilege</td><td align="left">用户特权信息，json 数组，如微信沃卡用户为（chinaunicom）</td></tr><tr><td align="left">unionid</td><td align="left">只有在用户将公众号绑定到微信开放平台帐号后，才会出现该字段。</td></tr></tbody></table><p>错误时微信会返回JSON数据包如下（示例为openid无效）:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"errcode"</span>:<span class="number">40003</span>,<span class="attr">"errmsg"</span>:<span class="string">" invalid openid "</span>&#125;</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol><li>设置网页授权</li><li>访问<a href="https://open.weixin.qq.com/connect/oauth2/authorize" target="_blank" rel="noopener">https://open.weixin.qq.com/connect/oauth2/authorize</a>? appid= <strong><code>APPID</code></strong> &amp;redirect_uri= <strong><code>REDIRECT_URI</code></strong> &amp;response_type=code&amp;scope= <strong><code>SCOPE</code></strong> &amp;state= <strong><code>STATE</code></strong> #wechat_redirect，回调redirect_uri/?code=<strong><code>CODE</code></strong>&amp;state=<strong><code>STATE</code></strong>获取code</li><li>访问<a href="https://api.weixin.qq.com/sns/oauth2/access_token" target="_blank" rel="noopener">https://api.weixin.qq.com/sns/oauth2/access_token</a>? appid= <strong><code>APPID</code></strong> &amp;secret= <strong><code>SECRET</code></strong> &amp;code= <strong><code>CODE</code></strong> &amp;grant_type=authorization_code通过返回的json获取 openid，access_token</li><li>访问<a href="https://api.weixin.qq.com/sns/userinfo" target="_blank" rel="noopener">https://api.weixin.qq.com/sns/userinfo</a>? access_token= <strong><code>ACCESS_TOKEN</code></strong> &amp;openid= <strong><code>OPENID</code></strong> &amp;lang= <strong><code>zh_CN</code></strong> 通过返回的json获取用户信息</li></ol><h1 id="附：代码"><a href="#附：代码" class="headerlink" title="附：代码"></a>附：代码</h1><ol><li><p>获取code：</p><p>wxpayjsapi.js:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * 访问网页授权页面，获取code(snsapi_base)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">getCodeWithBase: <span class="function">(<span class="params">redirect_uri, res, config</span>) =&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> url = <span class="string">'https://open.weixin.qq.com/connect/oauth2/authorize?'</span> +</span><br><span class="line">              <span class="string">'appid='</span> + config.wxappid +</span><br><span class="line">              <span class="string">'&amp;redirect_uri='</span>+ <span class="built_in">encodeURI</span>(redirect_uri)+</span><br><span class="line">              <span class="string">'&amp;response_type=code&amp;scope=snsapi_base'</span> + </span><br><span class="line">              <span class="string">'&amp;state=STATE#wechat_redirect'</span>;</span><br><span class="line">    <span class="comment">// res.setHeader("Access-Control-Allow-Origin", "*");</span></span><br><span class="line">    res.redirect(url);</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * 访问网页授权页面，获取code(snsapi_userinfo)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">getCodeWithInfo: <span class="function">(<span class="params">redirect_uri, res, config</span>) =&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> url = <span class="string">'https://open.weixin.qq.com/connect/oauth2/authorize?'</span> +</span><br><span class="line">              <span class="string">'appid='</span> + config.wxappid +</span><br><span class="line">              <span class="string">'&amp;redirect_uri='</span>+ <span class="built_in">encodeURI</span>(redirect_uri) + </span><br><span class="line">              <span class="string">'&amp;response_type=code&amp;scope=snsapi_userinfo'</span> +</span><br><span class="line">              <span class="string">'&amp;state=STATE#wechat_redirect'</span>;</span><br><span class="line">    <span class="comment">// res.setHeader("Access-Control-Allow-Origin", "*");</span></span><br><span class="line">    res.redirect(url);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li><p>获取AccessToken和OpenId</p><p>wxpayjsapi.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 获取网页授权Access_Token和Openid</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">getAccessByCode: <span class="keyword">async</span> (code, config)=&gt;&#123;</span><br><span class="line">    <span class="keyword">const</span> getAccessTokenUrl = <span class="string">"https://api.weixin.qq.com/sns/oauth2/access_token?"</span> +</span><br><span class="line">        <span class="string">"appid="</span>+config.wxappid+</span><br><span class="line">        <span class="string">"&amp;secret="</span>+config.wxappsecret+</span><br><span class="line">        <span class="string">"&amp;code="</span>+code+</span><br><span class="line">        <span class="string">"&amp;grant_type=authorization_code"</span>;</span><br><span class="line">    <span class="keyword">const</span> opt = &#123;</span><br><span class="line">        url: getAccessTokenUrl,</span><br><span class="line">        json: <span class="literal">true</span>,</span><br><span class="line">        resolveWithFullResponse: <span class="literal">true</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> &#123;statusCode, body&#125; = <span class="keyword">await</span> request.post(opt);</span><br><span class="line">    <span class="comment">// console.log("status ==&gt; ",statusCode);</span></span><br><span class="line">    <span class="comment">// console.log("body ==&gt; ",body);</span></span><br><span class="line">    <span class="keyword">if</span> (statusCode == <span class="number">200</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">40029</span> != body.errcode) &#123;</span><br><span class="line">            <span class="keyword">return</span> body;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li><p>router:</p><p>index.js:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">router.get(<span class="string">'/'</span>, <span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> code = req.query.code;</span><br><span class="line">    <span class="keyword">if</span> (!code) &#123;</span><br><span class="line">        wx.getCodeWithBase(<span class="string">'http://yourdomain/'</span> ,res);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> access = <span class="keyword">await</span> wx.getAccessByCode(code);</span><br><span class="line">            <span class="keyword">if</span> (!access) &#123;</span><br><span class="line">                <span class="keyword">const</span> err = <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'权限读取错误'</span>);</span><br><span class="line">                err.httpStatusCode = <span class="number">400</span>;</span><br><span class="line">                next(err)</span><br><span class="line">                <span class="keyword">return</span> ;                </span><br><span class="line">            &#125;</span><br><span class="line">            res.render(<span class="string">'index'</span>, &#123;<span class="attr">openid</span>:access.openid&#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            next(e)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;用户在微信客户端中访问第三方网页，公众号可以通过微信网页授权机制，来获取用户基本信息，进而实现业务逻辑。&lt;/p&gt;
&lt;h1 id=&quot;网页授权回调域名&quot;&gt;&lt;a href=&quot;#网页授权回调域名&quot; class=&quot;headerlink&quot; title=&quot;网页授权回调域名&quot;&gt;&lt;/a&gt;网页授权回调域名&lt;/h1&gt;&lt;p&gt;1、在微信公众号请求用户网页授权之前，开发者需要先到公众平台官网中的“开发 - 接口权限 - 网页服务 - 网页帐号 - 网页授权获取用户基本信息”的配置选项中，修改授权回调域名。请注意，这里填写的是域名（是一个字符串），而不是URL，因此请勿加 http:// 等协议头；&lt;/p&gt;
&lt;p&gt;2、授权回调域名配置规范为全域名，比如需要网页授权的域名为：&lt;a href=&quot;http://www.cyril.cn，配置以后此域名下面的页面&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;www.cyril.cn，配置以后此域名下面的页面&lt;/a&gt;&lt;a href=&quot;http://www.cyril.cn/pay.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.cyril.cn/pay.html&lt;/a&gt; 、 &lt;a href=&quot;http://www.cyril.cn/music&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.cyril.cn/music&lt;/a&gt; 都可以进行OAuth2.0鉴权。但&lt;a href=&quot;http://pay.cyrilxu.cn/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://pay.cyrilxu.cn/&lt;/a&gt; 、&lt;a href=&quot;http://music.cyrilxu.cn&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://music.cyrilxu.cn&lt;/a&gt; 、&lt;a href=&quot;http://cyrilxu.cn&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://cyrilxu.cn&lt;/a&gt; 无法进行OAuth2.0鉴权&lt;/p&gt;
    
    </summary>
    
      <category term="微信" scheme="http://yoursite.com/categories/%E5%BE%AE%E4%BF%A1/"/>
    
      <category term="nodejs" scheme="http://yoursite.com/categories/%E5%BE%AE%E4%BF%A1/nodejs/"/>
    
    
      <category term="微信" scheme="http://yoursite.com/tags/%E5%BE%AE%E4%BF%A1/"/>
    
      <category term="微信授权" scheme="http://yoursite.com/tags/%E5%BE%AE%E4%BF%A1%E6%8E%88%E6%9D%83/"/>
    
  </entry>
  
  <entry>
    <title>Hexo中使用hexo-asset-image添加本地图片</title>
    <link href="http://yoursite.com/posts/73a817fb/"/>
    <id>http://yoursite.com/posts/73a817fb/</id>
    <published>2019-04-23T01:49:15.000Z</published>
    <updated>2019-12-18T15:28:18.241Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>把主页配置文件<code>_config.yml</code> 里的<code>post_asset_folder:</code>这个选项设置为<code>true</code></p></li><li><p>在你的hexo目录下执行这样一句话<code>npm install hexo-asset-image --save</code>，这是下载安装一个可以上传本地图片的插件，来自dalao：<a href="https://github.com/CodeFalling/hexo-asset-image" target="_blank" rel="noopener">dalao的git</a></p></li><li><p>运行<code>hexo n &quot;xxxx&quot;</code>来生成md时，<code>/source/_posts</code>文件夹内除了<code>xxxx.md</code>文件还有一个同名的文件夹</p></li><li><p>最后在<code>xxxx.md</code>中想引入图片时，先把图片复制到xxxx这个文件夹中，然后只需要在xxxx.md中按照markdown的格式引入图片：</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![你想输入的替代文字](xxxx/图片名.jpg)</span><br></pre></td></tr></table></figure><p><strong>注意： 网上大多数的教程都是这样引用图片，但是现在的hexo-asset-image 1.0.0版本，只需要输入图片名，不需要xxxx文件夹名。我依然建议像这样引用相对路径。这样在typora中会显示图片，而对于使用了abbrlink的blog也没有任何影响</strong></p><ol start="5"><li>最后检查一下，<code>hexo g</code>生成页面后，进入<code>public\2017\02\26\index.html</code>文件中查看相关字段，可以发现，html标签内的语句是<code>&lt;img src=&quot;2017/02/26/xxxx/图片名.jpg&quot;&gt;</code>，而不是<code>&lt;img src=&quot;xxxx/图片名.jpg&gt;</code>。这很重要，关乎你的网页是否可以真正加载你想插入的图片。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;把主页配置文件&lt;code&gt;_config.yml&lt;/code&gt; 里的&lt;code&gt;post_asset_folder:&lt;/code&gt;这个选项设置为&lt;code&gt;true&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在你的hexo目录下执行这样一句话&lt;cod
      
    
    </summary>
    
      <category term="blog" scheme="http://yoursite.com/categories/blog/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
      <category term="hexo-asset-image" scheme="http://yoursite.com/tags/hexo-asset-image/"/>
    
  </entry>
  
  <entry>
    <title>linode搭建VPN</title>
    <link href="http://yoursite.com/posts/45538/"/>
    <id>http://yoursite.com/posts/45538/</id>
    <published>2019-04-21T03:37:55.000Z</published>
    <updated>2019-12-18T15:28:18.256Z</updated>
    
    <content type="html"><![CDATA[<p>互联网有一座围墙，墙内的人想出去，墙外的人……真会玩</p><a id="more"></a><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在中国当个码农真难。想搜个问题，百度就别指望了，google的话，你还需要一个梯子。</p><h1 id="IPSec-ikev2"><a href="#IPSec-ikev2" class="headerlink" title="IPSec/ikev2"></a>IPSec/ikev2</h1><p>使用的是一键安装脚本</p><p>最新更新内容请见Github上的项目说明:<a href="https://github.com/quericy/one-key-ikev2-vpn" target="_blank" rel="noopener">https://github.com/quericy/one-key-ikev2-vpn</a></p><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ul><li>服务端要求：Ubuntu或者CentOS-6/7或者Debian</li><li>客户端：<ul><li>iOS/OSX=&gt;ikev1,ikev2</li><li>Andriod=&gt;ikev1</li><li>WindowsPhone=&gt;ikev2</li><li>其他Windows平台=&gt;ikev2</li></ul></li><li>可使用自己的私钥和根证书，也可自动生成</li><li>证书可绑定域名或ip</li><li>要是图方便可一路回车</li><li>生成单独的sysctl配置文件/etc/sysctl.d/10-ipsec.conf单独加载，用于开启ipv4转发(如以后卸载或需要关闭net.ipv4.ip_forward,请记得删除此文件);</li></ul><h2 id="服务端安装说明"><a href="#服务端安装说明" class="headerlink" title="服务端安装说明"></a><strong>服务端安装说明</strong></h2><ol><li>下载脚本:</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget --no-check-certificate https://raw.githubusercontent.com/quericy/one-key-ikev2-vpn/master/one-key-ikev2.sh</span><br></pre></td></tr></table></figure><ul><li>注:如需使用其他分支的脚本,请将上述url中的master修改为分支名称,各分支区别详见本页的分支说明节点</li></ul><ol start="2"><li>运行脚本：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod +x one-key-ikev2.sh</span><br><span class="line">bash one-key-ikev2.sh</span><br></pre></td></tr></table></figure><ol start="3"><li><p>等待自动配置部分内容后，选择vps类型（OpenVZ还是Xen、KVM），<strong>选错将无法成功连接，请务必核实服务器的类型</strong>。输入服务器ip或者绑定的域名(连接vpn时服务器地址将需要与此保持一致,如果是导入泛域名证书这里需要写*.域名的形式)；</p></li><li><p>选择使用使用证书颁发机构签发的SSL证书还是生成自签名证书：</p><ul><li>如果选择no,使用自签名证书（客户端如果使用IkeV2方式连接，将需要导入生成的证书并信任）则需要填写证书的相关信息(C,O,CN)，为空将使用默认值(default value)，确认无误后按任意键继续,后续安装过程中会出现输入两次pkcs12证书的密码的提示(可以设置为空)</li><li>如果选择yes，使用SSL证书（如果证书是被信任的，后续步骤客户端将无需导入证书）请在继续下一步之前，将以下文件按提示命名并放在<strong>脚本相同的目录下</strong>：<ol><li><strong>ca.cert.pem</strong> 证书颁发机构的CA，比如Let‘s Encrypt的证书,或者其他链证书；</li><li><strong>server.cert.pem</strong> 签发的域名证书；</li><li><strong>server.pem</strong> 签发域名证书时用的私钥；</li></ol></li></ul></li><li><p>是否使用SNAT规则(可选).默认为不使用.使用前请确保服务器具有不变的<strong>静态公网ip</strong>,可提升防火墙对数据包的处理速度.如果服务器网络设置了NAT(如AWS的弹性ip机制),则填写网卡连接接口的ip地址</p></li><li><p>防火墙配置.默认配置iptables(如果使用的是firewall(如CentOS7)请选择yes自动配置firewall,将无视SNAT并跳过后续的补充网卡接口步骤).补充网卡接口信息,为空则使用默认值(Xen、KVM默认使用eth0,OpenVZ默认使用venet0).如果服务器使用其他公网接口需要在此指定接口名称,<strong>填写错误VPN连接后将无法访问外网</strong>)</p></li><li><p>看到install Complete字样即表示安装完成。默认用户名密码将以黄字显示，可根据提示自行修改配置文件中的用户名密码,多用户则在配置文件中按格式一行一个(多用户时用户名不能使用%any),保存并重启服务生效。</p></li><li><p>将提示信息中的证书文件ca.cert.pem拷贝到客户端，修改后缀名为.cer后导入。ios设备使用Ikev1无需导入证书，而是需要在连接时输入共享密钥，共享密钥即是提示信息中的黄字PSK</p><p><img src="/posts/45538/complete.png" alt="complete"></p></li></ol><h2 id="客户端配置说明"><a href="#客户端配置说明" class="headerlink" title="客户端配置说明"></a><strong>客户端配置说明</strong></h2><ul><li><p>连接的服务器地址和证书保持一致,即取决于签发证书ca.cert.pem时使用的是ip还是域名;</p></li><li><p><strong>Android/iOS/OSX</strong> 可使用ikeV1,认证方式为用户名+密码+预共享密钥(PSK);</p></li><li><p><strong>iOS/OSX/Windows7+/WindowsPhone8.1+/Linux</strong> 均可使用IkeV2,认证方式为用户名+密码。使用SSL证书则无需导入证书；使用自签名证书则需要先导入证书才能连接,可将ca.cert.pem更改后缀名作为邮件附件发送给客户端,手机端也可通过浏览器导入,其中:</p><ul><li><p><strong>iOS/OSX</strong> 的远程ID和服务器地址保持一致,用户鉴定选择”用户名”.如果通过浏览器导入,将证书放在可访问的远程外链上,并在<strong>系统浏览器</strong>(Safari)中访问外链地址;</p></li><li><p><strong>Windows PC</strong> 系统导入证书需要导入到<strong>“本地计算机”</strong>的”受信任的根证书颁发机构”,以”当前用户”的导入方式是无效的.推荐运行mmc添加本地计算机的证书管理单元来操作;</p></li><li><p><strong>WindowsPhone8.1</strong> 登录时的用户名需要带上域信息,即wp”关于”页面的设备名称\用户名,也可以使用%any   %any : EAP “密码”进行任意用户名登录,但指定了就不能添加其他用户名了.</p></li><li><p><strong>WindowsPhone10</strong> 的vpn还存在bug(截至10586.164),ikeV2方式可连接但系统流量不会走vpn,只能等微软解决. (截至14393.5,此bug已经得到修复,现在WP10已经可以正常使用IkeV2.)</p></li><li><p><strong>Windows10</strong> 也存在此bug,部分Win10系统连接后ip不变,没有自动添加路由表,使用以下方法可解决:</p><ul><li><p>手动关闭vpn的split tunneling功能(在远程网络上使用默认网关);</p></li><li><p>也可使用powershell修改,进入CMD窗口,运行如下命令:</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">powershell           <span class="comment">#进入ps控制台</span></span><br><span class="line">get-vpnconnection    <span class="comment">#检查vpn连接的设置（包括vpn连接的名称）</span></span><br><span class="line">set-vpnconnection <span class="string">"vpn连接名称"</span> -splittunneling <span class="literal">$false</span>    <span class="comment">#关闭split tunneling     </span></span><br><span class="line">get-vpnconnection    <span class="comment">#检查修改结果</span></span><br><span class="line"><span class="keyword">exit</span>                 <span class="comment">#退出ps控制台</span></span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><ul><li><p><strong>Windows 10</strong></p><p>导入证书：</p><ul><li>将 CA 根证书 ca.cert.pem 重命名为ca.cert.crt</li><li>双击 ca.cert.crt 开始安装证书</li><li>点击安装证书</li><li>“存储位置” 选择 “本地计算机”, 下一步</li><li>选择 “将所有的证书都放入下列存储区”, 点浏览, 选择      “受信任的根证书颁发机构”, 确定, 下一步, 完成.</li></ul><p>建立连接：</p><ul><li>“控制面板”-“网络和共享中心”-“设置新的连接或网络”-“连接到工作区”-“使用我的      Internet 连接”</li><li>Internet 地址写服务器 IP 或 URL。</li><li>描述随便写。</li><li>用户名密码写之前配置的 EAP 的那个。</li><li>确定</li><li>转到 控制面板网络和 Internet网络连接</li><li>在新建的 VPN 连接上右键属性然后切换到“安全”选项卡</li><li>VPN 类型选 IKEv2</li><li>数据加密选“需要加密”</li><li>身份认证这里需要说一下，如果想要使用 EAP      认证的话就选择“Microsoft:安全密码(EAP-MSCHAP v2)”; 想要使用私人证书认证的话就选择“使用计算机证书”。</li><li>再切换到 “网络” 选项卡, 双击 “Internet      协议版本 4” 以打开属性窗口, 这里说一下, 如果你使用的是老版本的 win10, 可能会打不开属性窗口, 这是已知的 bug,      升级最新版本即可解决.</li><li>点击 “高级” 按钮, 勾选      “在远程网络上使用默认网关”, 确定退出.</li></ul><p>VPN 配置完成</p></li><li><p><strong>Windows 7</strong></p><ul><li>开始菜单搜索「cmd」，打开后输入mmc（Microsoft 管理控制台）。</li><li>「文件」-「添加/删除管理单元」，添加「证书」单元</li><li>证书单元的弹出窗口中一定要选「计算机账户」，之后选「本地计算机」，确定。</li><li>在左边的「控制台根节点」下选择「证书」-「受信任的根证书颁发机构」-「证书」，右键      -「所有任务」-「导入」打开证书导入窗口。</li><li>选择 CA 证书 ca.cert.crt导入即可</li></ul><p><strong>注意</strong> 千万不要双击 .p12证书导入！因为那样会导入到当前用户而不是本机计算机中，ipsec 守护精灵是访问不了它的。</p></li></ul><h2 id="卸载方式"><a href="#卸载方式" class="headerlink" title="卸载方式"></a><strong>卸载方式</strong></h2><ol><li><p>进入脚本所在目录的strongswan文件夹执行:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make   uninstall</span><br></pre></td></tr></table></figure></li><li><p>删除脚本所在目录的相关文件(one-key-ikev2.sh,strongswan.tar.gz,strongswan文件夹,my_key文件夹).</p></li><li><p>卸载后记得检查iptables配置.</p></li></ol><h2 id="分支说明"><a href="#分支说明" class="headerlink" title="分支说明"></a><strong>分支说明</strong></h2><ul><li><a href="https://github.com/quericy/one-key-ikev2-vpn/tree/master" target="_blank" rel="noopener">master</a>分支:经过测试的相对稳定的版本;</li><li><a href="https://github.com/quericy/one-key-ikev2-vpn/tree/dev-debian" target="_blank" rel="noopener">dev-debian</a>分支:Debian6/7测试分支,该脚本由<a href="https://github.com/bestoa" target="_blank" rel="noopener">bestoa</a>修改提供;</li><li><a href="https://github.com/quericy/one-key-ikev2-vpn/tree/dev" target="_blank" rel="noopener">dev</a>分支:开发分支,使用最新版本的strongswan,未进过充分测试,用于尝试和添加一些新的功能,未来可能添加对L2TP的兼容支持,以及对ipv6的支持;</li></ul><h2 id="部分问题解决方案"><a href="#部分问题解决方案" class="headerlink" title="部分问题解决方案"></a><strong>部分问题解决方案</strong></h2><ul><li><p>ipsec启动问题：服务器重启后默认ipsec不会自启动，请命令手动开启,或添加<code>/usr/local/sbin/ipsec start</code>到自启动脚本文件中(如rc.local等)</p></li><li><p>ipsec常用指令:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ipsec start    <span class="comment">#启动服务</span></span><br><span class="line">ipsec stop     <span class="comment">#关闭服务</span></span><br><span class="line">ipsec restart <span class="comment">#重启服务</span></span><br><span class="line">ipsec reload  <span class="comment">#重新读取</span></span><br><span class="line">ipsec status   <span class="comment">#查看状态</span></span><br><span class="line">ipsec --<span class="built_in">help</span>   <span class="comment">#查看帮助</span></span><br></pre></td></tr></table></figure></li><li><p>可连接但是无法访问网络：</p><ul><li>检查iptables是否正常启用,检查iptables规则是否与其他地方冲突,或根据服务器防火墙的实际情况手动修改配置。</li><li>检查sysctl是否开启ip_forward:<ol><li>打开sysctl文件:<code>vim /etc/sysctl.conf</code></li><li>修改<code>net.ipv4.ip_forward=1</code>后保存并关闭文件</li><li>使用以下指令刷新sysctl：<code>sysctl -p</code></li><li>如执行后正常回显则表示生效。如显示错误信息，请重新打开/etc/syctl并根据错误信息对应部分用#号注释，保存后再刷新sysctl直至不会报错为止。</li></ol></li></ul></li><li><p>如果之前使用的自签名证书，后改用SSL证书，部分客户端可能需要卸载之前安装的自签名证书,否则可能会报Ike凭证不可接受的错误:</p><ul><li>iOS：设置-通用，删除证书对应的描述文件即可；</li><li>Windows：Win+R,运行mmc打开Microsoft管理控制台,文件-&gt;添加管理单元,添加证书管理单元(必须选计算机账户),展开受信任的根证书颁发机构,找到对应的自签名证书,右键删除即可;</li><li>Windows Phone:暂时没有找到可以卸载证书的方法(除非越狱),目前只能重置来解决此问题</li></ul></li></ul><hr><h1 id="IPSec-L2tp"><a href="#IPSec-L2tp" class="headerlink" title="IPSec/L2tp"></a>IPSec/L2tp</h1><p>很久之前搭建的L2tp服务器，顺便记录下</p><p>ipsec用于验证和加密数据包，由openswan提供；l2tp即第二层隧道协议，由xl2tpd提供。 </p><p>以下是在我的linode VPS上安装 L2TP / IPSec VPN 的记录（用了openswan+xl2tpd实现）：</p><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>VPS:linode</p><p>OS: ubuntu 12.04.5 LTS</p><h2 id="安装openswan"><a href="#安装openswan" class="headerlink" title="安装openswan"></a>安装openswan</h2><h3 id="下载openswan"><a href="#下载openswan" class="headerlink" title="下载openswan"></a>下载openswan</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt-get update</span><br><span class="line">apt-get install openswan</span><br></pre></td></tr></table></figure><h3 id="修改-etc-ipsec-conf："><a href="#修改-etc-ipsec-conf：" class="headerlink" title="修改/etc/ipsec.conf："></a>修改/etc/ipsec.conf：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">version 2.0</span><br><span class="line">config setup</span><br><span class="line">nat_traversal=yes</span><br><span class="line">virtual_private=%v4:10.0.0.0/8,%v4:192.168.0.0/16,%v4:172.16.0.0/12</span><br><span class="line">oe=off</span><br><span class="line">protostack=netkey</span><br><span class="line"></span><br><span class="line">conn L2TP-PSK-NAT</span><br><span class="line">rightsubnet=vhost:%priv</span><br><span class="line">also=L2TP-PSK-noNAT</span><br><span class="line"></span><br><span class="line">conn L2TP-PSK-noNAT</span><br><span class="line">authby=secret</span><br><span class="line">pfs=no</span><br><span class="line">auto=add</span><br><span class="line">keyingtries=3</span><br><span class="line">rekey=no</span><br><span class="line">ikelifetime=8h</span><br><span class="line">keylife=1h</span><br><span class="line">type=transport</span><br><span class="line">left=这里填写IP地址</span><br><span class="line">leftprotoport=17/1701</span><br><span class="line">right=%any</span><br><span class="line">rightprotoport=17/%any</span><br></pre></td></tr></table></figure><h3 id="修改-etc-ipsec-secrets"><a href="#修改-etc-ipsec-secrets" class="headerlink" title="修改/etc/ipsec.secrets"></a>修改/etc/ipsec.secrets</h3><p>注意把%YOUR.SERVER.IP.ADDRESS%替换成你的服务器地址。另外国外论坛也有提到第二种写法可以避免一些不必要的问题。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%YOUR.SERVER.IP.ADDRESS% %any: PSK “YourSharedSecret”</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">: PSK “YourSharedSecret”</span><br></pre></td></tr></table></figure><h3 id="修改包转发设置"><a href="#修改包转发设置" class="headerlink" title="修改包转发设置"></a>修改包转发设置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> each <span class="keyword">in</span> /proc/sys/net/ipv4/conf/*</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> 0 &gt; <span class="variable">$each</span>/accept_redirects</span><br><span class="line"><span class="built_in">echo</span> 0 &gt; <span class="variable">$each</span>/send_redirects</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">echo</span> 1 &gt; /proc/sys/net/ipv4/ip_forward</span><br><span class="line">sysctl -p</span><br></pre></td></tr></table></figure><h3 id="重启并检查ipsec配置"><a href="#重启并检查ipsec配置" class="headerlink" title="重启并检查ipsec配置"></a>重启并检查ipsec配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo service ipsec restart</span><br><span class="line">sudo ipsec verify</span><br></pre></td></tr></table></figure><p>输出没有FAILED项即可，WARNING可以不管。<br>除了Opportunistic Encryption Support外，其他应该均正常</p><p>我碰到的2个错误和解决方法：<br><strong>a：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Two or more interfaces found, checking IP forwarding [FAILED]</span><br></pre></td></tr></table></figure><p>原因为未执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> 1 &gt; /proc/sys/net/ipv4/ip_forward</span><br><span class="line">sysctl -p</span><br></pre></td></tr></table></figure><p><strong>b：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Pluto listening for IKE on udp 500 [FAILED]</span><br><span class="line">Cannot execute command “lsof -i UDP:500″: No such file or directory</span><br><span class="line">Pluto listening for NAT-T on udp 4500 [FAILED]</span><br><span class="line">Cannot execute command “lsof -i UDP:4500″: No such file or directory</span><br></pre></td></tr></table></figure><p>原因为lsof未安装，需<code>apt-get install lsof</code></p><h3 id="最后重启ipsec服务"><a href="#最后重启ipsec服务" class="headerlink" title="最后重启ipsec服务"></a>最后重启ipsec服务</h3><p>可试着新建一个 ipsec+l2tp 的连接，填好服务器地址和 SharedKey，点连接拨号,查看服务器那边的 /var/log/auth.log</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">clrngd</span><br><span class="line">rngd</span><br><span class="line">/etc/init.d/ipsec restart</span><br><span class="line">tail -f /var/<span class="built_in">log</span>/auth.log</span><br></pre></td></tr></table></figure><p>如果出现了类似记录即正常</p><p><code>STATE_QUICK_R2: IPsec SA established transport mode</code></p><p>同时，将上面这段代码完整地复制一次，加入到 /etc/rc.local 中，使其在每次系统启动时都生效。</p><h2 id="安装L2TP服务"><a href="#安装L2TP服务" class="headerlink" title="安装L2TP服务"></a>安装L2TP服务</h2><h3 id="下载xl2tpd"><a href="#下载xl2tpd" class="headerlink" title="下载xl2tpd"></a>下载xl2tpd</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install xl2tpd</span><br></pre></td></tr></table></figure><h3 id="修改-etc-xl2tpd-xl2tpd-conf"><a href="#修改-etc-xl2tpd-xl2tpd-conf" class="headerlink" title="修改/etc/xl2tpd/xl2tpd.conf"></a>修改/etc/xl2tpd/xl2tpd.conf</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[global]</span><br><span class="line">ipsec saref = yes</span><br><span class="line"></span><br><span class="line">[lns default]</span><br><span class="line">ip range = 10.121.121.100-10.121.121.155</span><br><span class="line">local ip = 10.121.121.1</span><br><span class="line">refuse chap = yes</span><br><span class="line">refuse pap = yes</span><br><span class="line">require authentication = yes</span><br><span class="line">ppp debug = yes</span><br><span class="line">pppoptfile = /etc/ppp/options.xl2tpd</span><br><span class="line">length bit = yes</span><br></pre></td></tr></table></figure><p>ip range和local ip根据自己的需要定义</p><h2 id="安装PPP服务，用来管理-VPN-用户"><a href="#安装PPP服务，用来管理-VPN-用户" class="headerlink" title="安装PPP服务，用来管理 VPN 用户"></a>安装PPP服务，用来管理 VPN 用户</h2><h3 id="下载ppp"><a href="#下载ppp" class="headerlink" title="下载ppp"></a>下载ppp</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install ppp</span><br></pre></td></tr></table></figure><h3 id="修改-etc-ppp-options-xl2tpd"><a href="#修改-etc-ppp-options-xl2tpd" class="headerlink" title="修改/etc/ppp/options.xl2tpd"></a>修改/etc/ppp/options.xl2tpd</h3><p>没有的话建一个，为防止DNS污染，用了谷歌的DNS，也可用其他的DNS</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">require-mschap-v2</span><br><span class="line">ms-dns 8.8.8.8</span><br><span class="line">ms-dns 8.8.4.4</span><br><span class="line">asyncmap 0</span><br><span class="line">auth</span><br><span class="line">crtscts</span><br><span class="line">lock</span><br><span class="line">hide-password</span><br><span class="line">modem</span><br><span class="line">debug</span><br><span class="line">name l2tpd</span><br><span class="line">proxyarp</span><br><span class="line">lcp-echo-interval 30</span><br><span class="line">lcp-echo-failure 4</span><br></pre></td></tr></table></figure><h3 id="修改-etc-ppp-chap-secrets"><a href="#修改-etc-ppp-chap-secrets" class="headerlink" title="修改 /etc/ppp/chap-secrets"></a>修改 /etc/ppp/chap-secrets</h3><p>设置拨号的用户名和密码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># user server password ip</span><br></pre></td></tr></table></figure><h2 id="重启xl2tpd服务"><a href="#重启xl2tpd服务" class="headerlink" title="重启xl2tpd服务"></a>重启xl2tpd服务</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/xl2tpd restart</span><br></pre></td></tr></table></figure><h2 id="修改iptables防火墙，启用包转发"><a href="#修改iptables防火墙，启用包转发" class="headerlink" title="修改iptables防火墙，启用包转发"></a>修改iptables防火墙，启用包转发</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">iptables –table nat –append POSTROUTING –jump MASQUERADE</span><br><span class="line">iptables -t nat -A POSTROUTING -s 10.121.121.0/24 -o eth0 -j MASQUERADE</span><br><span class="line">iptables -t nat -A POSTROUTING -j MASQUERADE</span><br></pre></td></tr></table></figure><hr><h1 id="PPTP"><a href="#PPTP" class="headerlink" title="PPTP"></a>PPTP</h1><p>记录了更早之前搭建的VPN</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">apt-get install pptpd</span><br><span class="line">vi /etc/pptpd.conf</span><br><span class="line">vi /etc/ppp/options</span><br><span class="line">vi /etc/ppp/pptpd-options</span><br><span class="line">/etc/init.d/pptpd restart</span><br><span class="line">iptables -t nat -A POSTROUTING -s 172.16.121.0/16 -o eth0 -j MASQUERADE</span><br></pre></td></tr></table></figure><p>三个文件内容分别为：</p><p>pptpd.conf:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">option /etc/ppp/pptpd-options</span><br><span class="line">logwtmp</span><br><span class="line"></span><br><span class="line">localip 你的ip</span><br><span class="line">remoteip 172.16.121.100-150  #自己定义</span><br></pre></td></tr></table></figure><p>optons:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">asyncmap 0</span><br><span class="line">noauth</span><br><span class="line">crtscts</span><br><span class="line">lock</span><br><span class="line">hide-password</span><br><span class="line">modem</span><br><span class="line">lcp-echo-interval 30</span><br><span class="line">lcp-echo-failure 4</span><br><span class="line">noipx</span><br><span class="line">ms-dns 8.8.8.8</span><br><span class="line">logfile /var/log/ppp.log</span><br></pre></td></tr></table></figure><p>pptpd-options:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">name 你的ip</span><br><span class="line">refuse-pap</span><br><span class="line">refuse-chap</span><br><span class="line">refuse-mschap</span><br><span class="line">require-mschap-v2</span><br><span class="line">require-mppe-128</span><br><span class="line">proxyarp</span><br><span class="line">nodefaultroute</span><br><span class="line">lock</span><br><span class="line">nobsdcomp </span><br><span class="line">logfile /var/log/pptpd.log</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;互联网有一座围墙，墙内的人想出去，墙外的人……真会玩&lt;/p&gt;
    
    </summary>
    
      <category term="贪玩" scheme="http://yoursite.com/categories/%E8%B4%AA%E7%8E%A9/"/>
    
    
      <category term="VPN" scheme="http://yoursite.com/tags/VPN/"/>
    
      <category term="Linode" scheme="http://yoursite.com/tags/Linode/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 修改永久链接的默认格式</title>
    <link href="http://yoursite.com/posts/96723aac/"/>
    <id>http://yoursite.com/posts/96723aac/</id>
    <published>2019-04-20T01:23:26.000Z</published>
    <updated>2019-12-18T15:28:18.240Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hexo-永久链接"><a href="#Hexo-永久链接" class="headerlink" title="Hexo 永久链接"></a>Hexo 永久链接</h1><ul><li><code>Hexo</code>的永久链接的默认格式是 <code>:year/:month/:day/:title/</code></li><li>永久链接的意思，即访问站点下某一篇文章时，其路径是 <code>2018/11/17/xxxx/</code>，而且它保存在本地站点的<code>public</code>目录也是<code>2018/11/17/xxxx/</code></li></ul><p><strong>坏处：</strong></p><p>如果我们的文章标题是中文的，那么该路径就会出现中文字符</p><ul><li>在路径中出现了中文字符很容易引发各种问题</li><li>不利于<strong>seo</strong>，因为路径包含了<strong>年月日三个层级</strong>，层级太深不利于<strong>百度蜘蛛抓取</strong></li></ul><h1 id="使用-hexo-abbrlink"><a href="#使用-hexo-abbrlink" class="headerlink" title="使用 hexo-abbrlink"></a>使用 hexo-abbrlink</h1><p><strong>解决办法</strong><br>利用其它的插件来生成唯一的路径，这样就算我们的文件标题随意修改，也不会导致原本的链接失效而造成站点下存在大量的死链。</p><a id="more"></a><h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure><h3 id="修改站点配置文件"><a href="#修改站点配置文件" class="headerlink" title="修改站点配置文件"></a>修改站点配置文件</h3><p>打开根目录下的<code>_config.yml</code>文件，修改<code>permalink</code>, 如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># permalink: :year/:month/:day/:title/</span><br><span class="line"># permalink_defaults:</span><br><span class="line">permalink: posts/:abbrlink/</span><br><span class="line">abbrlink:</span><br><span class="line">  alg: crc32  # 算法：crc16(default) and crc32</span><br><span class="line">  rep: hex    # 进制：dec(default) and hex</span><br></pre></td></tr></table></figure><h3 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h3><ul><li>完成上述步骤后</li><li>运行如下操作</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean   # 删除缓存</span><br><span class="line">hexo g     # 生成静态文件</span><br><span class="line">hexo s       # 启动服务器</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Hexo-永久链接&quot;&gt;&lt;a href=&quot;#Hexo-永久链接&quot; class=&quot;headerlink&quot; title=&quot;Hexo 永久链接&quot;&gt;&lt;/a&gt;Hexo 永久链接&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Hexo&lt;/code&gt;的永久链接的默认格式是 &lt;code&gt;:year/:month/:day/:title/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;永久链接的意思，即访问站点下某一篇文章时，其路径是 &lt;code&gt;2018/11/17/xxxx/&lt;/code&gt;，而且它保存在本地站点的&lt;code&gt;public&lt;/code&gt;目录也是&lt;code&gt;2018/11/17/xxxx/&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;坏处：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果我们的文章标题是中文的，那么该路径就会出现中文字符&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在路径中出现了中文字符很容易引发各种问题&lt;/li&gt;
&lt;li&gt;不利于&lt;strong&gt;seo&lt;/strong&gt;，因为路径包含了&lt;strong&gt;年月日三个层级&lt;/strong&gt;，层级太深不利于&lt;strong&gt;百度蜘蛛抓取&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;使用-hexo-abbrlink&quot;&gt;&lt;a href=&quot;#使用-hexo-abbrlink&quot; class=&quot;headerlink&quot; title=&quot;使用 hexo-abbrlink&quot;&gt;&lt;/a&gt;使用 hexo-abbrlink&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;解决办法&lt;/strong&gt;&lt;br&gt;利用其它的插件来生成唯一的路径，这样就算我们的文件标题随意修改，也不会导致原本的链接失效而造成站点下存在大量的死链。&lt;/p&gt;
    
    </summary>
    
      <category term="blog" scheme="http://yoursite.com/categories/blog/"/>
    
    
      <category term="blog" scheme="http://yoursite.com/tags/blog/"/>
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
      <category term="NexT" scheme="http://yoursite.com/tags/NexT/"/>
    
  </entry>
  
  <entry>
    <title>GitHub Page + hexo 搭建blog</title>
    <link href="http://yoursite.com/posts/24289/"/>
    <id>http://yoursite.com/posts/24289/</id>
    <published>2019-04-18T04:01:16.000Z</published>
    <updated>2019-12-18T15:28:18.242Z</updated>
    
    <content type="html"><![CDATA[<p>使用hexo在GitHub Page上搭建免费的个人博客</p><h1 id="前导学习"><a href="#前导学习" class="headerlink" title="前导学习"></a>前导学习</h1><ul><li>Git 相关知识</li><li>Markdown 语法</li><li>npm 相关知识</li></ul><p>因为是自己的总结，相关学习链接后期再加。下面的内容在已掌握相关知识的基础上进行</p><a id="more"></a><h1 id="搭建GitHub-Page"><a href="#搭建GitHub-Page" class="headerlink" title="搭建GitHub Page"></a>搭建GitHub Page</h1><h2 id="注册GitHub"><a href="#注册GitHub" class="headerlink" title="注册GitHub"></a>注册GitHub</h2><p>不写了，没个GitHub账号，好意思说自己是程序猿？</p><h2 id="新建同名Repository"><a href="#新建同名Repository" class="headerlink" title="新建同名Repository"></a>新建同名Repository</h2><p>新建repository</p><p><img src="/posts/24289/newrepository.png" alt></p><p>名称：yourname.github.io </p><p><strong>注意：用户名必须相同</strong></p><p><img src="/posts/24289/createrepository.png" alt></p><h2 id="设置GitHub-Page"><a href="#设置GitHub-Page" class="headerlink" title="设置GitHub Page"></a>设置GitHub Page</h2><p>现在，你的GitHub主页就可以访问了</p><p><img src="/posts/24289/firstpage.png" alt></p><p>我们可以在settings里设置自己的域名，比如<a href="http://www.cyrilxu.cn" target="_blank" rel="noopener">www.cyrilxu.cn</a></p><p>域名的购买和备案相关内容不在本文讨论范围内</p><p><img src="/posts/24289/configdomain.png" alt></p><h2 id="生成SSH-Key"><a href="#生成SSH-Key" class="headerlink" title="生成SSH Key"></a>生成SSH Key</h2><p>在～/.ssh文件夹下，看一下有没有id_rsa和id_rsa.pub两个文件。<br><img src="/posts/24289/sshfold.png" alt></p><p>如果没有，用以下命令生成ssh密钥：<code>ssh-keygen -t rsa -C &quot;youremail@example.com</code> 回车，会提示你输入一个密码，这个密码会在你提交项目时使用，如果为空的话提交项目时则不用输入。</p><p>id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。</p><h2 id="在GitHub中配置ssh-key"><a href="#在GitHub中配置ssh-key" class="headerlink" title="在GitHub中配置ssh key"></a>在GitHub中配置ssh key</h2><p>在个人设置里添加新的ssh key<br><img src="/posts/24289/configssh.png" alt></p><p>将id_rsa.pub里的内容粘贴到key中<br><img src="/posts/24289/addssh.png" alt></p><h1 id="使用hexo搭建静态博客"><a href="#使用hexo搭建静态博客" class="headerlink" title="使用hexo搭建静态博客"></a>使用hexo搭建静态博客</h1><p>Hexo是一个简单、快速、强大的基于 Github Pages 的博客框架，支持Markdown格式，有众多优秀插件和主题。</p><p>Hexo官方使用文档：<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/</a></p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>你需要安装nodejs和npm</p><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -g hexo</span><br></pre></td></tr></table></figure><h2 id="创建博客项目"><a href="#创建博客项目" class="headerlink" title="创建博客项目"></a>创建博客项目</h2><p>新建工程文件夹，例如 <code>/WorkSpace/hexo/</code> 这是你存放博客代码的地方</p><p>初始化 <code>hexo init</code> hexo会自动生成工作目录，包括node_modules，其目录结构如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">|   ├── draft.md</span><br><span class="line">|   ├── page.md</span><br><span class="line">|   └── post.md</span><br><span class="line">├── source</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure><h2 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h2><p>执行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g</span><br></pre></td></tr></table></figure><p>hexo就会在public文件夹下生成相关html文件。提交到GitHub上就可看到默认的hexo博客</p><h2 id="本地预览"><a href="#本地预览" class="headerlink" title="本地预览"></a>本地预览</h2><p>执行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo s</span><br></pre></td></tr></table></figure><p>hexo会开启本地web服务，在浏览器里访问<a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a>即可看到内容</p><h2 id="使用插件上传到GitHub"><a href="#使用插件上传到GitHub" class="headerlink" title="使用插件上传到GitHub"></a>使用插件上传到GitHub</h2><h3 id="配置git地址"><a href="#配置git地址" class="headerlink" title="配置git地址"></a>配置git地址</h3><p>打开根目录下站点配置文件<code>_config.yml</code>，配置有关deploy的部分：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">  repository:</span> <span class="string">git@github.com:CyrilXu/cyrilxu.github.io.git</span></span><br><span class="line"><span class="attr">  branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><p>执行命令 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i hexo-deployer-git -S</span><br></pre></td></tr></table></figure><p>安装完成后生成静态文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g</span><br></pre></td></tr></table></figure><h3 id="部署到GitHub"><a href="#部署到GitHub" class="headerlink" title="部署到GitHub"></a>部署到GitHub</h3><p>执行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo d</span><br></pre></td></tr></table></figure><p>则public下的文件就部署到GitHub项目中。</p><p>测试打开<a href="https://yourname.github.io/，出现博客首页，则表示配置成功" target="_blank" rel="noopener">https://yourname.github.io/，出现博客首页，则表示配置成功</a></p><h2 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h2><p>现在我们有了一个最基本的博客里，在根目录下<strong>站点配置文件</strong><code>_config.yml</code>，设置如下内容：</p><p><img src="/posts/24289/basicinfo.png" alt></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>title</td><td>网站标题</td></tr><tr><td>subtitle</td><td>网站副标题</td></tr><tr><td>description</td><td>网站描述</td></tr><tr><td>author</td><td>您的名字</td></tr><tr><td>language</td><td>网站使用的语言</td></tr><tr><td>timezone</td><td>网站时区。Hexo 默认使用您电脑的时区。</td></tr></tbody></table><p>执行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo d -g</span><br></pre></td></tr></table></figure><p>生成静态文件并部署到GitHub</p><h1 id="开始写博客"><a href="#开始写博客" class="headerlink" title="开始写博客"></a>开始写博客</h1><p>执行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">'文章名'</span></span><br></pre></td></tr></table></figure><p>hero会在<code>source/_posts/</code>下生成相关md文件。</p><p>打开此文件就可以开始写了。</p><p>写完执行 <code>hexo d -g</code>直接部署到GitHub</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用hexo在GitHub Page上搭建免费的个人博客&lt;/p&gt;
&lt;h1 id=&quot;前导学习&quot;&gt;&lt;a href=&quot;#前导学习&quot; class=&quot;headerlink&quot; title=&quot;前导学习&quot;&gt;&lt;/a&gt;前导学习&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Git 相关知识&lt;/li&gt;
&lt;li&gt;Markdown 语法&lt;/li&gt;
&lt;li&gt;npm 相关知识&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因为是自己的总结，相关学习链接后期再加。下面的内容在已掌握相关知识的基础上进行&lt;/p&gt;
    
    </summary>
    
      <category term="blog" scheme="http://yoursite.com/categories/blog/"/>
    
    
      <category term="blog" scheme="http://yoursite.com/tags/blog/"/>
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
      <category term="NexT" scheme="http://yoursite.com/tags/NexT/"/>
    
      <category term="GitHub Page" scheme="http://yoursite.com/tags/GitHub-Page/"/>
    
  </entry>
  
</feed>
